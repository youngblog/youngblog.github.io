<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020版本kali安装</title>
      <link href="/2020/0316undefined.html"/>
      <url>/2020/0316undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>——————————————————————————————————————<br>总所周知，这个最新版本的变化很大（其实就是桌面变化大）<br>其实嘞，物竞天择，随时代潮流。我刚好想试一试，那么就安装一个最新版本的，kali 2020.1</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><blockquote><p>我相信大家的电脑都是windows<br>所以，我就直接复制下载地址</p></blockquote><p><code>https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/</code><br><img src="https://img-blog.csdnimg.cn/20200316195043515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p>进入这个地址<br>因为我有梯子，所以就不管那么多，直接点击下载了</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195117743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>下载了一局王者的世界，不要问我为什么（我打了一局王者，这个就下载好了）</p></blockquote><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><blockquote><p>下载后是个压缩包，这时候我们就解压。解压一下下就妥了</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020031619513425.png" alt="在这里插入图片描述"></p><blockquote><p>我就解压到这里来，丝毫不慌~~</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195140262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>找到vmx后缀的这个，右键点击vm打开</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195149984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>就是第一个，可以直接免手工安装<br>打开后的初始账号密码是 kali | kali</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195304992.png" alt="在这里插入图片描述"></p><blockquote><p>进入界面一瞄，发现不赖<br><code>kali-undercover</code>  使用这个命令，可以切换主题</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195317209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>不行不行，我爱了</p><p>幸亏还是不一样的（这样以后还是可以在朋友面前装逼）<br>再使用那个命令，就可以再切换回来，这里只是像windows，但是实际上命令还是得使用linux的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195448651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>好吧，这有点不符合常理 这样的话以后会懵逼的，我丢</p></blockquote><blockquote><p>这是进入的是非管理员权限。这时候就要  <code>sudo su</code> 切换到管理员权限，然后修改密码用 <code>sudo passwd root</code><br>设置成你想要的密码</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020031619560873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>参考文章：<a href="https://www.moonsec.com/archives/762" target="_blank" rel="noopener">https://www.moonsec.com/archives/762</a> 这时候换源</p></blockquote><p><code>sudo vim /etc/apt/sources.list</code></p><h4 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h4><p><code>dpkg-reconfigure locales</code><br>进入图形化界面之后，（空格是选择，Tab是切换，带*是选中），<br>选中zh_CN.UTF-8，确定后，将zh_CN.UTF-8选为默认。</p><p><code>apt-get install xfonts-intl-chinese</code>  和 <code>apt-get install ttf-wqy-microhei</code> 来安装中文字体<br>然后重启1遍，如果不可以的话。就重启2遍就可以了<br>具体的网上有，我就不多描述了</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2020/0316undefined.html"/>
      <url>/2020/0316undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>——————————————————————————————————————</p><p>这是我之前发布到的其他的一个网址，这里的话我重新总结</p><p>可能分很多，我也不是很清楚，只是皮毛的研究了一下</p><h2 id="1，sql按数据库分的话，常用的有："><a href="#1，sql按数据库分的话，常用的有：" class="headerlink" title="1，sql按数据库分的话，常用的有："></a>1，sql按数据库分的话，常用的有：</h2><p><strong>MySQL，access，oracle，ms sql</strong></p><h2 id="2，按传参类型，分"><a href="#2，按传参类型，分" class="headerlink" title="2，按传参类型，分"></a>2，按传参类型，分</h2><p>Get，Post，cookie</p><p>总而言之有：<br><code>盲注</code>       ：（盲注分布尔型，和时间型）<br><code>union注入</code>：（我叫他显错注入）<br><code>head注入</code> ： （在请求头注入）<br><code>Post注入</code>  ：（也就是对于表单的注入，例如登录框）</p><p>还有就是关于其他数据库的骚姿势，例如<strong>mysql</strong>的<strong>dnslog</strong>注入，<strong>mssql</strong>的反弹注入</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我也就废话不多说，写出来，这是我原本csdn写的，不想重复，就这样把对应地址贴出来</p><h4 id="Mysql数据库注入："><a href="#Mysql数据库注入：" class="headerlink" title="Mysql数据库注入："></a>Mysql数据库注入：</h4><p><code>1：union注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104343242" target="_blank" rel="noopener">点击查看</a></p><p><code>2：盲注：</code><br><a href="https://blog.csdn.net/m0_46304840/article/details/104640938" target="_blank" rel="noopener">布尔型</a><br><a href="https://blog.csdn.net/m0_46304840/article/details/104688966" target="_blank" rel="noopener">时间型</a><br><code>3：报错注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104733922" target="_blank" rel="noopener">点击查看</a><br><code>4：宽字节注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104758798" target="_blank" rel="noopener">点击查看</a><br><code>5：cookie注入&amp;base64注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104774792" target="_blank" rel="noopener">点击查看</a><br><code>6：head注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104805895" target="_blank" rel="noopener">xff头注入</a><br>————————————————————————————————————————</p><h4 id="Access数据库注入"><a href="#Access数据库注入" class="headerlink" title="Access数据库注入"></a>Access数据库注入</h4><p><code>偏移注入&amp;移位溢注&amp;逐字猜解：：</code></p><p><a href="https://blog.csdn.net/m0_46304840/article/details/104808825" target="_blank" rel="noopener">点击查看</a></p><h4 id="MS-SQL数据库注入"><a href="#MS-SQL数据库注入" class="headerlink" title="MS SQL数据库注入"></a>MS SQL数据库注入</h4><p><code>mssql-union注入：</code> <a href="https://blog.csdn.net/m0_46304840/article/details/104815241" target="_blank" rel="noopener">union注入</a><br><code>mssql-反弹注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104818304" target="_blank" rel="noopener">反弹注入</a></p><p>至于其他的还没写，以后直接更新到这里</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Who are Young?</title>
      <link href="/2020/0316undefined.html"/>
      <url>/2020/0316undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="在下尘世中的一届小白，辣鸡中的战斗机"><a href="#在下尘世中的一届小白，辣鸡中的战斗机" class="headerlink" title="在下尘世中的一届小白，辣鸡中的战斗机"></a>在下尘世中的一届小白，辣鸡中的战斗机</h3><p>在安全圈内的一个混子选手，打王者也是王者里面的混子</p><p>所以只能不断的去论坛学习学习，但是没办法，我就是个靓仔<br><img src="https://img-blog.csdnimg.cn/20200316174518780.jpg" alt="这是靓仔"><br>———————————————————————————————————————————————————</p><h2 id="关于我这个战斗机的简介"><a href="#关于我这个战斗机的简介" class="headerlink" title="关于我这个战斗机的简介"></a>关于我这个战斗机的简介</h2><p><code>ID</code>：Young，youngboy<br><code>职业</code>：无QAQ<br><code>性格</code>：外冷内也冷，比较内向<br><code>住址</code>：福建莆田内，啷个哩个啷<br><code>喜欢看的剧</code>：我在未来等你，大唐女法医<br><code>喜欢的游戏</code>：也就一个王者荣耀吧（鄙人就是小学生）<br><code>其他爱好</code>：打游戏，看书，游泳，听歌<br><code>一些经历</code>：也就挖过洞，在各大src飘荡不小心上了个榜。然后就没啥了吧<br><code>为什么做安全</code>：做安全只是为了兴趣，简单就是装逼。小时候电影看多了趴<br>              做安全为兴趣的同时也赚点钱不然就吃土了</p><p>———————————————————————————————————————————————————</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>你问我爱你有多深，我也不知道该咋写了。蹭个免费博客玩<br>（不要问我为什么，问就是没钱）</p><p>预计发展方向：二进制<del>~</del></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反射性xss</title>
      <link href="/2020/0316undefined.html"/>
      <url>/2020/0316undefined.html</url>
      
        <content type="html"><![CDATA[<p>没啥好说的，直接贴出我之前写的：<a href="https://mp.csdn.net/console/editor/html/104876310" target="_blank" rel="noopener">反射型xss</a></p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali的基本配置</title>
      <link href="/2020/0316undefined.html"/>
      <url>/2020/0316undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-：vmware网络配置"><a href="#0x01-：vmware网络配置" class="headerlink" title="0x01 ：vmware网络配置"></a>0x01 ：vmware网络配置</h1><hr><p>在有下角有个网络适配器<br><img src="https://img-blog.csdnimg.cn/20200317004057207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>点击一下就出现了虚拟机设置<br><img src="https://img-blog.csdnimg.cn/20200317004201978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_5,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_14,color_FFFFFF,t_60" alt="在这里插入图片描述"><br>虚拟机有三个网络配置<br><code>1</code>：桥接模式（虚拟机和主机在同一个网络环境下的两台电脑）<br><code>2</code>：NAT模式（虚拟机通过主机联网）<br><code>3</code>：主机模式（只能虚拟机和主机直接交互）<br>前面2个应该比较熟悉，而第三个，意思就是无法ping通外网，只能虚拟机和宿主机直接互相ping通</p><h1 id="0x02：kali系统更新配置"><a href="#0x02：kali系统更新配置" class="headerlink" title="0x02：kali系统更新配置"></a>0x02：kali系统更新配置</h1><hr><p>更新配置这里使用老版本的，新版本的以后在弄（新版本msf依赖下载好慢，不习惯）</p><p>选择不更新 Metasploit<br><strong>1:</strong> 查看当前的系统中所有软件包状态</p><p><code>sudo dbjg --get-selections | more</code><br>这时候可以找打软件包为 “metasploit-framework”<br><strong>2:</strong> 给metasploit-framework锁定当前版本不更新</p><p><code>sudo apt-mark hold metasploit-framework</code><br><strong>3：</strong> 查看当前已锁定的软件包<br><code>sudo dbkg --get-selections | grep hold</code><br><strong>4:</strong> 取消软件保留设置</p><p><code>sudo -apt-mark unhold metasploit-framework</code><br>但是一般情况下的话不会去锁定哒<del>~</del></p><p><strong>kali系统更新后出现一些问题</strong><br>进入 <code>/usr/share/metasploit-framework</code> 目录下<br>使用命令</p><p><code>gem install bundler</code><br><code>gem update --system</code><br>然后就可以成功的启动了，具体可以问度娘的~~</p><h3 id="一、配置kali系统源"><a href="#一、配置kali系统源" class="headerlink" title="一、配置kali系统源"></a>一、配置kali系统源</h3><p><strong>1.</strong> 使用编辑器打开系统源文本<br><code>leafpad /etc/apt/aources.list</code></p><p><strong>2.</strong> 填写源</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#中科大</span>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib<span class="token comment" spellcheck="true">#阿里云</span>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span class="token comment" spellcheck="true">#清华大学</span>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free<span class="token comment" spellcheck="true">#163</span>deb http://mirrors.163.com/debian wheezy main non-free contribdeb-src http://mirrors.163.com/debian wheezy main non-free contribdeb http://mirrors.163.com/debian wheezy-proposed-updates main non-free contribdeb-src http://mirrors.163.com/debian wheezy-proposed-updates main non-free contribdeb-src http://mirrors.163.com/debian-security wheezy/updates main non-free contrib<span class="token comment" spellcheck="true">#东软大学</span>deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contribdeb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib<span class="token comment" spellcheck="true">#官方源</span>deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib</code></pre><p>任意选一个就好了，可以选清华，或者中科大</p><p><strong>3.</strong> 使用更新命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> upgrade <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> dist-upgrade</code></pre><h1 id="0x03：kali配置ssh服务"><a href="#0x03：kali配置ssh服务" class="headerlink" title="0x03：kali配置ssh服务"></a>0x03：kali配置ssh服务</h1><ol><li>开启ss服务</li></ol><p><code>service ssh start</code><br>2. 查看ssh服务状态</p><p><code>service ssh status</code><br>3. 关闭ssh服务</p><p><code>service ssh stop</code><br>步骤：<br>先是打开ssh服务，然后ifconfig查看虚拟机ip<br><img src="https://img-blog.csdnimg.cn/20200317011416793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就可以填主机，协议要选ssh<br>名称随意<br><img src="https://img-blog.csdnimg.cn/20200317011558319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后会提示我们输入用户名，就是虚拟机用户名<br>root （我的是root）<br>填写完后会要求我们输入密码<br><img src="https://img-blog.csdnimg.cn/20200317011712365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入你自己虚拟机的密码既可<br>然后点击记住密码，下次就可以直接登录了<br><img src="https://img-blog.csdnimg.cn/20200317011804574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现这个标志就说明成功了。啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>存储型&amp;dom型</title>
      <link href="/2020/0316undefined.html"/>
      <url>/2020/0316undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-存储型xss"><a href="#0x01-存储型xss" class="headerlink" title="0x01.存储型xss"></a>0x01.存储型xss</h1><hr>**1. 什么是存储型xss？**<blockquote><p>攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。只要访问了这个页面的访客，都有可能会执行这段恶意脚本<br>（因此储存型XSS的危害会更大。因为存储型XSS的代码存在于网页的代码中，可以说是永久型的）</p></blockquote><p><strong>2. 源码剖析</strong><br>这里直接贴出php源码</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gbk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>存储型<span class="token constant">XSS</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        输入你的<span class="token constant">ID</span>：  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span></span>        输入你的Name：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"insert into xss value ($id,'$name')"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span>        <span class="token keyword">echo</span> <span class="token string">"回显内容："</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"select * from xss where id=1"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>可以看到的是，先在第一段部分，接受用户的内容，第二段是将内容插入<br>数据库，第三个回显内容就是从数据库查询。<br>（其实那2个php可以合成一个php，但是我不想，懒得）<br>具体内容我在反射型xss已经讲过了，可以狭义的概述</p><blockquote><p><code>存储型xss</code>：<strong>用户输入内容插入了数据库，内存，文件等其他地方。然后再次访问的时候没有输入payload，就会自动弹窗</strong><br>（例如留言板，或者个人资料修改。第一次插入后，连续访问还自动弹窗，说明这就是存储型xss）</p><p><code>反射型xss</code>：<strong>用户想要利用，就得输入一次payload</strong> （例如在搜索处发现xss，想要让他弹窗，就得重新输入一遍）</p></blockquote><p><strong>3. 靶场演示</strong><br>通过源码，我们知道这是这是输出xss表中的内容<br>我们先看下xss表有没有内容<br><img src="https://img-blog.csdnimg.cn/20200317113852628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>发现没有内容，这时候我们进入靶场先插入id和name<br><img src="https://img-blog.csdnimg.cn/20200317113948174.png" alt="在这里插入图片描述"><br>然后会输出我们的名字<br><img src="https://img-blog.csdnimg.cn/20200317114029746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>这时候就成功的输出了，我们查看下xss这个表中有没有内容<br><img src="https://img-blog.csdnimg.cn/20200317114118487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候发现有条内容了。说明我们插入，或者我们平时注册的时候<br>会插入数据库等等，一般在网站后台可以看到</p><blockquote><p>我应该把上面的第三个php输出内容的代码单独拿出来，模拟管理员访问的页面 QAQ 但是写到这里了，我也不想弄，大概理解个意思就好了</p></blockquote><p>然后我把xss表内容删除掉，插入我们恶意语句的代码<br><img src="https://img-blog.csdnimg.cn/20200317114930473.png" alt="在这里插入图片描述"><br>payload：<code>&lt;script&gt;alert(\&#39;Young\&#39;)&lt;/script&gt;</code><br>这是提交，发现弹窗了<br><img src="https://img-blog.csdnimg.cn/20200317115039712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意这里为啥没有回显内容，因为他把我们输入的内容当做代码执行了，所以没有显示<br>（你见过执行的代码会显示给用户嘛 QAQ）<br><img src="https://img-blog.csdnimg.cn/20200317115153286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候发现数据库有了一条数据，那就是我们插入的数据<br>恶意的js语句<br>这种存储型xss漏洞存在于，留言板，个人资料等等<br>因为会保存进数据库，然后在后台显示，所以后台管理员只要看到这条信息<br>他就中招了</p><blockquote><p>至于会不会被发现，这个就不用担心，内容会被当做代码执行，所以不会显示的</p></blockquote><p>我们可以查看一下掌控安全的靶场<br><img src="https://img-blog.csdnimg.cn/20200317115651421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候点击一下查看留言，因为好多人都会在这里插<br>（你也可以在留言反馈那边弹一条）<br><img src="https://img-blog.csdnimg.cn/20200317115807285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然而也不知道是谁在这插，插这么多，我点不完。所以就不演示了</p><h1 id="0x02-Dom型xss"><a href="#0x02-Dom型xss" class="headerlink" title="0x02.Dom型xss"></a>0x02.Dom型xss</h1><hr>**什么是 dom—based xss？**`狭义的总结`：原本不应该出现xss的地方，但是经过javascript的操作之后产生了xss<p>这里涉及到了document对象的一些操作，看过前面偏移注入的话应该知道<br><code>document.cookie</code>  这样的话就是查看自己的cookie<br><img src="https://img-blog.csdnimg.cn/20200317141516218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>这里的话也可以使用下面这条命令，判断是否伪静态<br>如果使用这条的话，时间再不断的变化，就是动态</p><p><code>document.lastModifiled</code></p><p>还有其他的一些方法<br><img src="https://img-blog.csdnimg.cn/20200317142919710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里具体讲<code>document.write()</code><br>这个有啥用？<br>其实就是在页面上面输出<br><img src="https://img-blog.csdnimg.cn/20200317143505236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先判断下是不是动态页面，然后再写<br><code>document.write(&quot;young&quot;)</code><br>要write什么可以自己定义<br><img src="https://img-blog.csdnimg.cn/20200317143432531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然而上面提到了，其实这个write() 也是个js语句<br>接受编码，那我们试着将下面这个编码，看会不会弹窗<br><code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br><img src="https://img-blog.csdnimg.cn/20200317144009626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>编码后再使用document.write()写入<br><img src="https://img-blog.csdnimg.cn/20200317144052305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>发现这里弹窗了<del>~<br>我们通过js编码后，它成功的弹窗了<br>（但是这个不是漏洞，这里想说的是，像document.write() 会自动对编码进行解码</del>）</p><p>似乎扯的有点远了，但是如果被拦截了<br>这里可以通过Js代码的解码，去进行绕过 QAQ<br>然而xss的时候，也可以使用burp<br>因为有可能前端有限制，但是数据包没有</p><p>例如还有比较偏的，在上传头像的地方打xss QAQ</p><h2 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h2><p>这里的话借用靶场，因为我觉得这个靶场很容易讲的话很容易理解<br><img src="https://img-blog.csdnimg.cn/20200317152317345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>通过审查源码，我们可以发现，这里是document.write()进行输出到页面上的<br>这时候我们可以尝试的，也在这个页面弹窗，通过修改发现，这个输入点是在url那边<br><code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>这时候发现，似乎没有弹窗<br><img src="https://img-blog.csdnimg.cn/20200317152801970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是注意看，我们输入的内容，已经被<code>&lt;script&gt;</code>给包围了<br>这时候我们用其他的语句测试<br><code>&lt;img src=a onerror=alert(1) /&gt;</code><br><img src="https://img-blog.csdnimg.cn/20200317152957637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候成功的弹窗了，说明了我们输入的内容被执行了<br>可以简单理解成，标签内不可以使用<code>&lt;script&gt;</code></p><p>其他常用的弹窗语句<br>1.<code>&lt;img src=a onerror=alert(1) &gt;</code><br>2.<code>&lt;svg onload=alert(1)&gt;</code><br>这几个是我经常用的</p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>dom型xss其实本质上还是反射型xss，他没有与数据库交互，没次想要弹窗，都需要输入一次payload<br>对dom型xss没有深入了解</p><p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊<br><img src="https://img-blog.csdnimg.cn/20200317153445786.png" alt="尴尬"></p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
